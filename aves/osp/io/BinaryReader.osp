use namespace aves;

namespace io;

namespace binHelpers
{
	private function reverse2(buf)
	{
		buf[0], buf[1] = buf[1], buf[0];
	}
	private function reverse4(buf)
	{
		buf[0], buf[3] = buf[3], buf[0];
		buf[1], buf[2] = buf[2], buf[1];
	}
	private function reverse8(buf)
	{
		buf[0], buf[7] = buf[7], buf[0];
		buf[1], buf[6] = buf[6], buf[1];
		buf[2], buf[5] = buf[5], buf[2];
		buf[3], buf[4] = buf[4], buf[3];
	}
}

public inheritable BinaryReader
{
	public new(stream)
	{
		new this(stream, Encoding.utf8, false);
	}
	public new(stream, encoding)
	{
		new this(stream, encoding, false);
	}
	public new(stream, encoding, bigEndian)
	{
		if stream is not Stream:
			throw new TypeError("stream must be an io.Stream instance.");
		if not stream.canRead:
			throw new ArgumentError("The stream must be readable.", "stream");
		if encoding is not Encoding:
			throw new TypeError("encoding must be an aves.Encoding instance.");

		_stream = stream;
		_encoding = encoding;
		_bigEndian = bool(bigEndian);
	}

	private _stream;
	public get stream = _stream;

	private _encoding;
	public get encoding = _encoding;

	private _bigEndian;
	public get bigEndian = _bigEndian;

	public get position = _stream.position;

	private const bufferSize = 8;
	private _buffer = new Buffer(bufferSize);
	protected get buffer = _buffer;

	public overridable close()
	{
		_stream.close();
	}

	public overridable readBoolean()
	{
		var b = _stream.readByte();
		if b == -1:
			errorHelpers.endOfFile();

		return b > 0;
	}

	public overridable readByte()
	{
		var b = _stream.readByte();
		if b == -1:
			errorHelpers.endOfFile();

		return b;
	}
	public overridable readSByte()
	{
		var b = _stream.readByte();
		if b == -1:
			errorHelpers.endOfFile();

		if b > 127:
			b = (b & 0x7f) - 128;

		return b;
	}

	public overridable readInt16()
	{
		_stream.readInto(_buffer, 0, 2);
		if _bigEndian != Env.bigEndian:
			binHelpers.reverse2(_buffer);
		return _buffer.readInt16(0);
	}
	public overridable readInt32()
	{
		_stream.readInto(_buffer, 0, 4);
		if _bigEndian != Env.bigEndian:
			binHelpers.reverse4(_buffer);
		return _buffer.readInt32(0);
	}
	public overridable readInt64()
	{
		_stream.readInto(_buffer, 0, 8);
		if _bigEndian != Env.bigEndian:
			binHelpers.reverse8(_buffer);
		return _buffer.readInt64(0);
	}

	public readPackedInt()
	{
		var output = 0, shift = 0;

		var b;
		do
		{
			b = _stream.readByte();
			if b == -1:
				throw new EndOfFileError();

			output |= (b & 0x7f) << shift;

			shift += 7;
		} while b & 0x80;

		return output;
	}

	public overridable readUInt16()
	{
		_stream.readInto(_buffer, 0, 2);
		if _bigEndian != Env.bigEndian:
			binHelpers.reverse2(_buffer);
		return _buffer.readUInt16(0);
	}
	public overridable readUInt32()
	{
		_stream.readInto(_buffer, 0, 4);
		if _bigEndian != Env.bigEndian:
			binHelpers.reverse4(_buffer);
		return _buffer.readUInt32(0);
	}
	public overridable readUInt64()
	{
		_stream.readInto(_buffer, 0, 8);
		if _bigEndian != Env.bigEndian:
			binHelpers.reverse8(_buffer);
		return _buffer.readUInt64(0);
	}

	public overridable readFloat32()
	{
		_stream.readInto(_buffer, 0, 4);
		if _bigEndian != Env.bigEndian:
			binHelpers.reverse4(_buffer);
		return _buffer.readFloat32(0);
	}
	public overridable readFloat64()
	{
		_stream.readInto(_buffer, 0, 8);
		if _bigEndian != Env.bigEndian:
			binHelpers.reverse8(_buffer);
		return _buffer.readFloat64(0);
	}

	public overridable readString()
	{
		var byteCount = readPackedInt();
		var buf = byteCount <= bufferSize ?
			_buffer :
			new Buffer(byteCount);

		_stream.readInto(buf, 0, byteCount);
		return _encoding.getString(buf, 0, byteCount);
	}

	public overridable seek(amount, origin)
	{
		return _stream.seek(amount, origin);
	}
}