use namespace aves;

namespace io;

public inheritable TextWriter
{
	/// Summary: Creates a new {TextWriter} from the specified stream.
	///          The encoding is set to UTF-8, and {keepOpen} is set
	///          to false.
	/// Param stream: The stream to write to.
	/// Throws ArgumentNullError:
	///          {stream} is null.
	/// Throws TypeError:
	///          {stream} is not an {io.Stream}.
	/// Throws ArgumentError:
	///          {stream} is not writable.
	public new(stream)
	{
		new this(stream, Encoding.utf8, false);
	}
	/// Summary: Creates a new {TextWriter} from the specified stream and
	///          with the specified encoding. {keepOpen} is set to false.
	/// Param stream:   The stream to write to.
	/// Param encoding: The character encoding of the data in the stream.
	/// Throws ArgumentNullError:
	///          {stream} or {encoding} is null.
	/// Throws TypeError:
	///          {stream} is not an {io.Stream}.
	///
	///          {encoding} is not an {aves.Encoding}.
	/// Throws ArgumentError:
	///          {stream} is not writable.
	public new(stream, encoding)
	{
		new this(stream, encoding, false);
	}
	/// Summary: Creates a new {TextWriter} from the specified stream and
	///          with the specified encoding. The stream is optionally closed
	///          when the writer is closed.
	/// Param stream:    The stream to write to.
	/// Param encoding:  The character encoding of the data in the stream.
	/// Param keepOpen:  True to leave {stream} open when {close} is called
	///                  on the text writer; false to close it.
	/// Throws ArgumentNullError:
	///          {stream} or {encoding} is null.
	/// Throws TypeError:
	///          {stream} is not an {io.Stream}.
	///
	///          {encoding} is not an {aves.Encoding}.
	/// Throws ArgumentError:
	///          {stream} is not writable.
	public new(stream, encoding, keepOpen)
	{
		if stream is null:
			throw new ArgumentNullError("stream");
		if stream is not Stream:
			throw new TypeError("stream must be an io.Stream instance.");
		if not stream.canRead:
			throw new ArgumentError("The stream must be readable.", "stream");
		if encoding is null:
			throw new ArgumentNullError("encoding");
		if encoding is not Encoding:
			throw new TypeError("encoding must be an aves.Encoding instance.");

		_stream = stream;
		_encoding = encoding;
		_keepOpen = bool(keepOpen);
		encoder = encoding.getEncoder();
	}

	private _stream;
	/// Summary: Gets a reference to the stream that is being read from.
	public get stream = _stream;

	private _encoding;
	/// Summary: Gets the character encoding that the text writer uses.
	public get encoding = _encoding;

	private _newline = Env.newline;
	/// Summary: Gets a string containing the line separator used by
	///          the text writer.
	public get newline = _newline;
	/// Summary: Sets the line separator string used by the text writer.
	///          If set to null, the text writer will use the default
	///          line separator string, which is equal to {Env.newline}.
	public set newline
	{
		if value is null:
			value = Env.newline;
		else:
			value = string(value);
		_newline = value;
	}

	private _keepOpen;
	/// Summary: Determines whether the text writer closes the stream
	///          when the {close} method is called. If true, the stream
	///          will be kept open.
	public get keepOpen = _keepOpen;
	/// Summary: Sets a value that determines whether the text writer
	///          closes the stream when the {close} method is called. If
	///          true, the stream will be kept open.
	public set keepOpen { _keepOpen = bool(value); }

	private const defaultBufferSize = 1k;

	private encoder;
	private byteBuffer = new Buffer(defaultBufferSize);
	private byteOffset = 0;

	public overridable close()
	{
		try
		{
			// Try to flush pending characters to the stream
			flushInternal(true, true);
		}
		finally
		{
			try
			{
				if not _keepOpen:
					_stream.close();
			}
			finally
			{
				_stream = null;
			}
		}
	}

	public overridable flush()
	{
		if _stream is null:
			errorHelpers.writerClosed();

		flushInternal(true, true);
	}

	private flushInternal(flushStream, flushEncoder)
	{
		// Write any buffered bytes
		if byteOffset > 0
		{
			_stream.write(byteBuffer, 0, byteOffset);
			byteOffset = 0;
		}

		// Flush the encoder if necessary
		if flushEncoder
		{
			var count = encoder.getBytes("", byteBuffer, 0, true);
			if count > 0:
				_stream.write(byteBuffer, 0, count);
		}

		if flushStream:
			_stream.flush();
	}

	/// Summary: Writes the specified value to the stream, converted to
	///          a String.
	/// Param value: The value to write. This will be converted to a String.
	/// Throws TypeError:
	///          {value} could not be converted to a String.
	/// Throws InvalidStateError:
	///          The text writer is closed.
	public overridable write(value)
	{
		if _stream is null:
			errorHelpers.writerClosed();

		value = string(value);

		var byteCount = encoder.getByteCount(value, false);

		if byteCount > byteBuffer.size
		{
			// Our buffer is not big enough, allocate a temporary one.

			// Flush pending bytes
			if byteOffset > 0:
				flushInternal(false, false);

			var buffer = new Buffer(byteCount);
			encoder.getBytes(value, buffer, 0, false);
			// Write the buffer straight to the stream
			_stream.write(buffer, 0, byteCount);
		}
		else
		{
			if byteOffset + byteCount > byteBuffer.size:
				// Not enough space in our buffer; try to flush it
				// (but don't flush the encoder!)
				flushInternal(false, false);

			// We can use our byteBuffer! Let's do so.
			encoder.getBytes(value, byteBuffer, byteOffset, false);
			byteOffset += byteCount;
			// The values will be written to the stream when
			//   1. flush() is called
			//   2. the text writer is closed
			//   3. write() is called with a full buffer
		}
	}

	/// Summary: Writes a formatted string to the stream.
	/// Param format: The format string.
	/// Param values: The values to pass to {String.format}.
	/// Throws TypeError:
	///          {format} could not be converted to a String.
	/// Throws InvalidStateError:
	///          The text writer is closed.
	public overridable write(format, values)
	{
		write(string(format).format(values));
	}

	/// Summary: Writes a line separator to the stream. The value written is
	///          the value returned by {newline}.
	/// Throws InvalidStateError:
	///          The text writer is closed.
	public overridable writeLine()
	{
		write(newline);
	}

	/// Summary: Writes the specified value to the stream, converted to
	///          a String, followed by a line separator (see {newline}).
	/// Param value: The value to write. This will be converted to a String.
	/// Throws TypeError:
	///          {value} could not be converted to a String.
	/// Throws InvalidStateError:
	///          The text writer is closed.
	public overridable writeLine(value)
	{
		write(value);
		write(newline);
	}

	/// Summary: Writes a formatted string to the stream, followed by a line
	///          separator (see {newline}).
	/// Param format: The format string.
	/// Param values: The values to pass to {String.format}.
	/// Throws TypeError:
	///          {format} could not be converted to a String.
	/// Throws InvalidStateError:
	///          The text writer is closed.
	public overridable writeLine(format, values)
	{
		write(string(format).format(values));
		write(newline);
	}

	/// Summary: Creates a new {TextWriter} from the specified file name and the
	///          UTF-8 encoding. If the file does not exist, it will be created;
	///          if it already exists, it will be overwritten.
	/// Param fileName: The name of the file to write to.
	/// Returns: A new {TextWriter} that writes to the specified file.
	/// Throws ArgumentNullError:
	///          {fileName} is null.
	/// Throws TypeError:
	///          {fileName} could not be converted to a String.
	public static open(fileName)
	{
		if fileName is null:
			throw new ArgumentNullError("fileName");

		return new TextWriter(File.create(fileName));
	}

	/// Summary: Creates a new {TextWriter} from the specified file name and
	///          encoding. If the file does not exist, it will be created;
	///          if it already exists, it will be overwritten.
	/// Param fileName: The name of the file to write to.
	/// Param encoding: The character encoding of the file.
	/// Returns: A new {TextWriter} that writes to the specified file with the
	///          specified encoding.
	/// Throws ArgumentNullError:
	///          {fileName} or {encoding} is null.
	/// Throws TypeError:
	///          {fileName} could not be converted to a String.
	///
	///          {encoding} is not an {Encoding}.
	public static open(fileName, encoding)
	{
		if fileName is null:
			throw new ArgumentNullError("fileName");
		if encoding is null:
			throw new ArgumentNullError("encoding");
		if encoding is not Encoding:
			throw new TypeError("encoding must be an aves.Encoding.");

		return new TextWriter(File.create(fileName), encoding);
	}
}