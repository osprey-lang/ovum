use "Random.osp";

use namespace aves;

namespace math
{
	/// Summary: The base of the natural logarithm.
	public const e = __named_const(real: e);
	/// Summary: The mathematical constant π, which is the ratio of a circle's circumference
	///          to its diameter.
	public const pi = __named_const(real: pi);
	/// Summary: The golden ratio, equal to `(1 + √(5)) / 2`.
	public const phi = __named_const(real: phi);
	/// Summary: The square root of 2.
	public const sqrt2 = __named_const(real: sqrt2);

	/// Summary: Returns the absolute value of {n}.
	/// Param n: The number to get the absolute value of. (Int, UInt or Real)
	/// Returns: The absolute value of {n}, in the same type as {n}.
	///
	///          If {n} is NaN, the function returns NaN, and if {n} is negative infinity, the
	///          function returns positive infinity.
	/// Throws TypeError:
	///          {n} is not an Int, UInt or Real.
	public function abs(n)
		__extern("aves_math_abs");

	/// Summary: Returns the arccosine of {n}; that is, the angle whose cosine is {n}.
	/// Param n: A number representing a cosine, where −1 ≤ {n} ≤ 1. (UInt, Int or Real)
	/// Returns: A Real representing an angle in radians, θ, such that 0 ≤ θ ≤ π.
	///
	///          If {n} is NaN, or {n} < −1, or {n} > 1, the function returns NaN.
	/// Throws TypeError:
	///          {n} could not be converted to a Real.
	public function acos(n)
		__extern("aves_math_acos");

	/// Summary: Returns the arcsine of {n}; that is, the angle whose sine is {n}.
	/// Param n: A number representing a sine, where −1 ≤ {n} ≤ 1. (UInt, Int or Real)
	/// Returns: A Real representing an angle in radians, θ, such that −π/2 ≤ θ ≤ π/2.
	///
	///          If {n} is NaN, or {n} < −1, or {n} > 1, the function returns NaN.
	/// Throws TypeError:
	///          {n} could not be converted to a Real.
	public function asin(n)
		__extern("aves_math_asin");

	/// Summary: Returns the arctangent of {n}; that is, the angle whose tangent is {n}.
	/// Param n: A number representing a tangent. (Int, UInt or Real)
	/// Returns: A Real representing an angle in radians, θ, such that −π/2 ≤ θ ≤ π/2.
	///
	///          If {n} is NaN, the function returns NaN;
	///          if {n} is negative infinity, −π/2; and
	///          if {n} is positive infinity, π/2.
	/// Throws TypeError:
	///          {n} could not be converted to a Real.
	public function atan(n)
		__extern("aves_math_atan");

	/// Summary: Returns the arctangent of the quotient of two values.
	/// Param y: The y coordinate of a point. (Int, UInt or Real)
	/// Param x: The x coordinate of a point. (Int, UInt or Real)
	/// Returns: A Real representing an angle in radians, θ, such that −π <= θ < π and
	///          tan(θ) = {y}/{x}, where ({y}, {x}) is a point in the Cartesian plane.
	///          This is conceptually similar to calculating the arctangent (see {atan})
	///          of {y}/{x}, except that the signs of {y} and {x} are used to determine
	///          the quadrant.
	///
	///          If {x} or {y} is NaN, or either is infinite, this function returns NaN.
	/// Throws TypeError:
	///          {x} or {y} could not be converted to a Real.
	public function atan2(y, x)
		__extern("aves_math_atan2");

	/// Summary: Returns the cube root of {n}.
	/// Param n: The number to calculate the cube root of. (Int, UInt or Real)
	/// Returns: The cube root of {n}, as a Real.
	/// Throws TypeError:
	///          {n} could not be converted to a Real.
	public function cbrt(n)
		__extern("aves_math_cbrt");

	/// Summary: Returns a number representing {n} rounded up to the nearest integer.
	/// Param n: The number to round. (Int, UInt or Real)
	/// Returns: If {n} is an Int or UInt, it is returned as-is.
	///
	///          If {n} is a Real, the function returns a Real with the value of {n}
	///          rounded up to the nearest integer. If {n} is NaN, the function returns
	///          NaN.
	/// Throws TypeError:
	///          {n} is not an Int, UInt or Real.
	public function ceil(n)
		__extern("aves_math_ceil");

	/// Summary: Clamps a value to the specified range.
	/// Param value: The value to clamp.
	/// Param min: The smallest value that {value} can have, inclusive.
	/// Param max: The largest value that {value} can have, inclusive.
	/// Returns: If {value} < {min}, {min}.
	///          If {value} > {max}, {max}.
	///          Otherwise, {value}.
	public function clamp(value, min, max)
	{
		return value < min ? min :
			value > max ? max :
			value;
	}

	/// Summary: Returns the cosine of the specified angle.
	/// Param θ: The angle, in radians, to calculate the cosine of. (Int, UInt or Real)
	/// Returns: The cosine of {θ}, as a Real.
	///
	///          If {θ} is NaN or positive or negative infinity, this function returns NaN.
	/// Throws TypeError:
	///          {θ} could not be converted to a Real.
	public function cos(θ)
		__extern("aves_math_cos");

	/// Summary: Returns the hyperbolic cosine of the specified angle.
	/// Param α: The angle, in radians, to calculate the hyperbolic cosine of. (Int, UInt or Real)
	/// Returns: The hyperbolic cosine of {α}, as a Real.
	///
	///          If {α} is positive or negative infinity, this function returns positive infinity.
	///          If {α} is NaN, this function returns NaN.
	/// Throws TypeError:
	///          {α} could not be converted to a Real.
	public function cosh(α)
		__extern("aves_math_cosh");

	public function distance(x1, y1, x2, y2)
	{
		var dx = x2 - x1;
		var dy = y2 - y1;
		return sqrt(dx * dx + dy * dy);
	}

	/// Summary: Returns the quotient and remainder of the specified values.
	/// Param a: The dividend of the operation.
	/// Param b: The divisor of the operation.
	/// Returns: A two-element List containing the quotient of {a} and {b}, followed by
	///          the remainder of division of {a} by {b}.
	/// Remarks: The input values do not need to be of any particular types. The only
	///          requirement is that the type of {a} supports the `/` and `%` operators.
	public function divRem(a, b)
	{
		return a / b, a % b;
	}

	/// Summary: Returns e raised to the specified power.
	/// Param n: The specified power. (Int, UInt or Real)
	/// Returns: The number e raised to the specified power.
	///
	///          If {n} is NaN or positive infinity, that value is returned.
	///          If {n} is negative infinity, this function returns 0.0.
	/// Throws TypeError:
	///          {n} could not be convereted to a Real.
	public function exp(n)
		__extern("aves_math_exp");

	/// Summary: Returns a number representing {n} rounded down to the nearest integer.
	/// Param n: The number to round. (Int, UInt or Real)
	/// Returns: If {n} is an Int or UInt, the number is returned as-is.
	///
	///          If {n} is a Real, the function returns a Real with the value of {n}
	///          rounded down to the nearest integer.
	///          If {n} is NaN, this function returns NaN.
	/// Throws TypeError:
	///          {n} is not an Int, UInt or Real.
	public function floor(n)
		__extern("aves_math_floor");

	/// Summary: Returns the natural logarithm of the specified number.
	/// Param n: The number to calculate the natural logarithm for. (Int, UInt or Real)
	/// Returns: The natural logarithm of {n}, as a Real.
	///
	///          If {n} is negative or is NaN, this function returns NaN.
	///          If {n} is zero, the return value is negative infinity.
	///          If {n} is positive infinity, that value is returned.
	/// Throws TypeError:
	///          {n} could not be converted to a Real.
	public function log(n)
		__extern("aves_math_logE");

	/// Summary: Returns the logarithm of the specified number in the specified base.
	/// Param n: The number to calculate the logarithm for. (Int, UInt or Real)
	/// Param logBase: The base of the logarithm. (Int, UInt or Real)
	/// Returns: The logarithm of {n} in base {logBase}, as a Real.
	///          If either value is NaN, this function returns NaN.
	/// Throws TypeError:
	///          {n} or {logBase} could not be converted to a Real.
	public function log(n, logBase)
		__extern("aves_math_logBase");

	/// Summary: Returns the base-10 logarithm of the specified number.
	/// Param n: The number to calculate the base-10 logarithm for. (Int, UInt or Real)
	/// Returns: The logarithm of {n} in base 10, as a Real.
	///
	///          If {n} is negative or is NaN, this function returns NaN.
	///          If {n} is zero, the return value is negative infinity.
	///          If {n} is positive infinity, that value is returned.
	public function log10(n)
		__extern("aves_math_log10");

	/// Summary: Returns the largest of two values.
	/// Param a: The first value to compare.
	/// Param b: The second value to compare.
	/// Returns: If {b} > {a}, then {b}; otherwise, {a}. If either argument is null,
	///          the other is returned.
	/// Remarks: This function works with any types that implement the `<=>` operator,
	///          not just numeric types.
	///
	///          The special treatment of null allows it to be used as a sentinel value,
	///          which is always treated as the smallest possible value. Hence, anything
	///          is considered larger than it. This is useful particularly when trying
	///          to find the largest value in a sequence that may be empty. Consider:
	///
	///          `var largest = numbers.fold(math.max);`
	///
	///          If `numbers` is an iterable or iterator, the `fold` method will throw
	///          when the sequence is empty. The solution to this would be to give `fold`
	///          an initial value, which is returned if `numbers` is empty; but there
	///          may not be a good value to use for that purpose, if the range of values
	///          in `numbers` is unknown. That is where null comes in:
	///
	///          `var largest = numbers.fold(null, math.max);`
	///
	///          Now, if `numbers` is empty, `largest` will contain null. In all other
	///          cases, it will contain the actual largest value. Note, however, the one
	///          caveat: if the sequence contains nulls, they will effectively be ignored.
	///          This may or may not be desirable.
	public function max(a, b)
	{
		if a is null:
			return b;
		if b is null:
			return a;
		return b > a ? b : a;
	}

	/// Summary: Returns the smallest of two values.
	/// Param a: The first value to compare.
	/// Param b: The second value to compare.
	/// Returns: If {b} < {a}, then {b}; otherwise, {a}. If either argument is null,
	///          the other is returned.
	/// Remarks: This function works with any types that implement the `<=>` operator,
	///          not just numeric types.
	///
	///          The special treatment of null allows it to be used as a sentinel value,
	///          which is always treated as the largest possible value. Hence, anything
	///          is considered smaller than it. This is useful particularly when trying
	///          to find the smallest value in a sequence that may be empty. Consider:
	///
	///          `var smallest = numbers.fold(math.max);`
	///
	///          If `numbers` is an iterable or iterator, the `fold` method will throw
	///          when the sequence is empty. The solution to this would be to give `fold`
	///          an initial value, which is returned if `numbers` is empty; but there
	///          may not be a good value to use for that purpose, if the range of values
	///          in `numbers` is unknown. That is where null comes in:
	///
	///          `var smallest = numbers.fold(null, math.max);`
	///
	///          Now, if `numbers` is empty, `smallest` will contain null. In all other
	///          cases, it will contain the actual smallest value. Note, however, the one
	///          caveat: if the sequence contains nulls, they will effectively be ignored.
	///          This may or may not be desirable.
	public function min(a, b)
	{
		if a is null:
			return b;
		if b is null:
			return a;
		return b < a ? b : a;
	}

	/// Summary: Returns the sign of the specified number.
	/// Param n: The number to get the sign of. (Int, UInt or Real)
	/// Returns: If {n} is less than zero, −1.
	///          If {n} is greater than zero, 1.
	///          Otherwise (including if {n} is NaN), 0.
	///
	///          The return value is always an Int.
	/// Throws TypeError:
	///          {n} is not an Int, UInt or Real.
	public function sign(n)
		__extern("aves_math_sign");

	/// Summary: Returns the sine of the specified angle.
	/// Param θ: The angle, in radians, to calculate the sine of. (Int, UInt or Real)
	/// Returns: The sine of {θ}, as a Real.
	///
	///          If {θ} is NaN or positive or negative infinity, this function returns NaN.
	/// Throws TypeError:
	///          {θ} could not be converted to a Real.
	public function sin(θ)
		__extern("aves_math_sin");

	/// Summary: Returns the hyperbolic sine of the specified angle.
	/// Param α: The angle, in radians, to calculate the hyperbolic sine of. (Int, UInt or Real)
	/// Returns: The hyperbolic sine of {α}, as a Real.
	///
	///          If {α} is NaN or positive or negative infinity, that value is returned.
	/// Throws TypeError:
	///          {α} could not be converted to a Real.
	public function sinh(α)
		__extern("aves_math_sinh");

	/// Summary: Returns the square root of {n}.
	/// Param n: The number to calculate the square root of. (Int, UInt or Real)
	/// Returns: The square root of {n}, as a Real.
	/// Throws TypeError:
	///          {n} could not be converted to a Real.
	public function sqrt(n)
		__extern("aves_math_sqrt");

	/// Summary: Returns the tangent of the specified angle.
	/// Param θ: The angle, in radians, to calculate the tangent of. (Int, UInt or Real)
	/// Returns: The sine of {θ}, as a Real.
	///
	///          If {θ} is NaN or positive or negative infinity, this function returns NaN.
	/// Throws TypeError:
	///          {θ} could not be converted to a Real.
	public function tan(θ)
		__extern("aves_math_tan");

	/// Summary: Returns the hyperbolic tangent of the specified angle.
	/// Param α: The angle, in radians, to calculate the hyperbolic tangent of. (Int, UInt or Real)
	/// Returns: The hyperbolic tangent of {α}, as a Real.
	///
	///          If {α} is positive infinity, then 1 is returned.
	///          If {α} is negative infinity, then −1 is returned.
	///          If {α} is NaN, this function returns NaN.
	/// Throws TypeError:
	///          {α} could not be converted to a Real.
	public function tanh(α)
		__extern("aves_math_tanh");

	/// Summary: Converts the specified angle from degrees to radians.
	/// Param degrees: The angle, in degrees. (Int, UInt or Real)
	/// Returns: {degrees} converted to radians, as a Real. If {degrees} is NaN, the
	///          return value is NaN.
	/// Throws TypeError:
	///          {degrees} could not be converted to a Real.
	/// Remarks: 1 degree is equal to π / 180 radians. Hence, 360° = 2π radians,
	///          and 180° = π radians.
	public function toRadians(degrees)
	{
		return real(degrees) * pi / 180.0;
	}

	/// Summary: Converts the specified angle from radians to degrees.
	/// Param radians: The angle, in radians. (Int, UInt or Real)
	/// Returns: {radians} converted to degrees, as a Real. If {radians} is NaN, the
	///          return value is NaN.
	/// Throws TypeError:
	///          {radians} could not be converted to a Real.
	/// Remarks: 1 radian is equal to 180 / π degrees. Hence, π radians = 180°,
	///          and 2π radians = 360°.
	public function toDegrees(radians)
	{
		return real(radians) * 180.0 / pi;
	}
}
