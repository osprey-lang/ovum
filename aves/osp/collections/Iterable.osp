namespace aves;

/// Summary: Exposes a read-only interface that can be used to iterate
///          over a specific object.
/// Remarks: Unlike {Iterator} objects, {Iterable} can be iterated
///          over any number of times. Because {Iterator} instances
///          can only be iterated over once, you cannot pass such
///          an instance into the {Iterable} constructor.
public inheritable Iterable
{
	/// Summary: Creates a new Iterable representing an empty collection.
	public new()
	{
		collection = null;
	}
	/// Summary: Creates a new Iterable for the specified collection.
	/// Param collection: The collection to create an iterable wrapper for.
	///          If this value is null, it is treated like an empty collection.
	/// Throws ArgumentNullError: {collection} is null.
	/// Throws ArgumentError: {collection} is of a type derived from {Iterator}.
	public new(collection)
	{
		if collection is null:
			throw new ArgumentNullError("collection");
		if collection is Iterator:
			throw new ArgumentError("The collection cannot be of a type derived from Iterator.", "collection");

		this.collection = collection;
	}

	private collection;

	iter
	{
		if collection is null:
			return Iterator.empty;
		return collection.iter;
	}
}