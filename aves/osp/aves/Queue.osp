namespace aves;

/// Summary: Implements a collection with first-in-first-out (FIFO) behaviour.
///
///          An item is added to a queue by enqueueing it, which adds it to
///          the back of the queue. To retrieve items from the queue, it must
///          be dequeued, which removes it from the front of the queue. Hence,
///          items are retrieved in the same order they were added.
///
///          The items in a queue cannot be indexed into. They can only be
///          manipulated by enqueueing and dequeueing.
public inheritable Queue is Collection
{
	/// Summary: Creates a new, empty {Queue} with the default capacity.
	public new()
	{
		new this(defaultCapacity);
	}
	/// Summary: Creates a new, empty {Queue} with the specified initial capacity.
	/// Param capacity: The capacity of the new queue. (Int, UInt or Real)
	/// Throws TypeConversionError:
	///          {capacity} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {capacity} is less than zero.
	public new(capacity)
	{
		capacity = int(capacity);
		if capacity < 0:
			throw new ArgumentRangeError("capacity");

		initialize(capacity);
	}

	private items; // Array
	private _length = 0;  // Number of actual entries in the queue
	private startIndex = 0;
	private version = 0;

	/// Summary: Gets the total number of items in the queue.
	/// Returns: The total number of items in the queue, as an Int.
	override get length = _length;

	/// Summary: Determines whether the queue is empty.
	/// Returns: True if the queue is empty; otherwise, false.
	public get isEmpty = _length == 0;

	/// Summary: Gets the capacity of the queue; that is, the number of items
	///          that can be enqueued before resizing the internal container.
	/// Returns: The capacity of the queue, as an Int.
	public get capacity = items.length;
	/// Summary: Sets the capacity of the queue; that is, the number of items
	///          that can be enqueued before resizing the internal container.
	/// Throws TypeConversionError:
	///          The value could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          The value is less than {length}.
	public set capacity
	{
		value = int(value);
		if value < length:
			throw new ArgumentRangeError("value");

		if value != _length:
			setCapacity(value);
	}

	private initialize(capacity)
	{
		items = new Array(capacity);
	}

	/// Summary: Enqueues a value at the end of the queue.
	/// Param value: The value to enqueue.
	public enqueue(value)
	{
		if _length == capacity:
			resize();

		items[(startIndex + _length) % capacity] = value;
		_length += 1;
		version += 1;
	}

	/// Summary: Returns the value at the front of the queue. The value is
	///          removed from the queue.
	/// Returns: The value at the front of the queue.
	/// Throws InvalidStateError:
	///          The queue is empty.
	public dequeue()
	{
		if _length == 0:
			throw new InvalidStateError("There are no items in the queue.");

		var value = items[startIndex];
		items[startIndex] = null;

		startIndex = (startIndex + 1) % capacity;
		_length -= 1;
		version += 1;

		return value;
	}

	/// Summary: Removes all the values from the queue, without affecting
	///          the capacity of the queue.
	public clear()
	{
		items.fill(null);
		startIndex = 0;
		_length = 0;
		version += 1;
	}

	private resize()
	{
		var newCapacity = math.max(defaultCapacity, _length * 2);
		setCapacity(newCapacity);
	}

	private setCapacity(newCapacity)
	{
		if startIndex == 0
		{
			Array.resize(ref items, newCapacity);
		}
		else
		{
			var newItems = new Array(newCapacity);

			var i = 0;
			while i < _length
			{
				newItems[i] = items[(startIndex + i) % capacity];
				i += 1;
			}

			startIndex = 0;
			items = newItems;
		}

		version += 1;
	}

	override toString()
	{
		return "Queue[length = {0}]".format([length]);
	}

	iter
	{
		var startVersion = version;

		var i = 0;
		while i < _length
		{
			if startVersion != version:
				throw new InvalidStateError("The queue has changed since the enumeration started.");

			yield items[(startIndex + i) % capacity];
			i += 1;
		}
	}

	private const defaultCapacity = 4;
}
