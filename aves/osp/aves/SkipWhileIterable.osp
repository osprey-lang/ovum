namespace aves;

/// Summary: Implements {Iterable.skipWhile}.
internal class SkipWhileIterable is Iterable
{
	public new(this.inner, this.predicate);

	private inner;
	private predicate;

	iter
	{
		return new SkipWhileIterator(inner.iter, predicate);
	}
}

internal class SkipWhileIterator is Iterator
{
	public new(this.inner, this.predicate);

	private inner;
	private predicate;
	private skipItems = true;

	override get current => inner.current;

	override moveNext()
	{
		if skipItems {
			while inner.moveNext() {
				if not predicate(inner.current) {
					// When the predicate returns false, we stop skipping
					// and yield the current item.
					skipItems = false;
					return true;
				}
			}

			// If we fall through here, it means we got to the end before
			// the predicate returned false. Don't try to skip again.
			skipItems = false;
		}

		return inner.moveNext();
	}
}
