namespace aves;

/// Summary: Exposes a read-only {Iterable} that lets you iterate over a single
///          collection object. The primary difference between this and {Iterable}
///          is that this class completely hides methods methods that the wrapped
///          collection exposes. In other words, it turns the wrapped collection
///          into a read-only sequence. By contrast, {Iterable} is a base class
///          used by many collection types, and is usually augmented with members
///          that add and remove items as well as indexers.
/// Remarks: Unlike {Iterator} objects, {Iterable} can be iterated over any number
///          of times. Because {Iterator} instances can only be iterated over once,
///          you cannot pass an {Iterator} to the {ReadOnlyIterable} constructor.
public inheritable ReadOnlyIterable is Iterable
{
	/// Summary: Creates a new {ReadOnlyIterable} representing an empty collection.
	public new()
	{
		_collection = null;
	}
	/// Summary: Creates a new {ReadOnlyIterable} for the specified collection.
	/// Param collection: The collection to create an iterable wrapper for.
	/// Throws ArgumentNullError:
	///          {collection} is null.
	/// Throws ArgumentError:
	///          {collection} is of a type derived from {Iterator}.
	public new(collection)
	{
		if collection is null {
			throw new ArgumentNullError("collection");
		}
		if collection is Iterator {
			throw new ArgumentError("The collection cannot be of a type derived from Iterator.", "collection");
		}

		this._collection = collection;
	}

	private _collection;
	/// Summary: Gets a reference to the collection wrapped by the iterable.
	protected get collection => _collection;

	// The wrapped collection may contain optimized versions of certain Iterable methods.
	// Call through to the underlying methods whenever possible.

	overridable override count()
	{
		if _collection is null {
			return 0;
		}
		return _collection.count();
	}

	overridable override toList()
	{
		if _collection is null {
			return [];
		}
		return _collection.toList();
	}

	overridable override toArray()
	{
		if _collection is null {
			return new Array(0);
		}
		return _collection.toArray();
	}

	iter
	{
		if _collection is null {
			return Iterator.empty;
		}
		return _collection.iter;
	}
}
