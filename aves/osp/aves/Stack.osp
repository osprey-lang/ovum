namespace aves;

/// Summary: Implements a collection with last-in-first-out behaviour.
///
///          An item is added to a stack by pushing it, which adds it to the
///          top of the stack. To retrieve an item from the stack, it must be
///          popped, which removes it from the top of the stack, or peeked,
///          which returns the top of the stack without removing it. It is
///          only possible to manipulate the top of the stack directly; hence,
///          items are retrieved in the opposite order they were added.
///
///          The items on a stack cannot be indexed into. They can only be
///          manipulated by pushing, popping and peeking. The items of a stack
///          are iterated from top to bottom.
public inheritable Stack is Collection
{
	/// Summary: Creates a new, empty {Stack} with the default capacity.
	public new()
	{
		new this(defaultCapacity);
	}
	/// Summary: Creates a new, empty {Stack} with the specified initial capacity.
	/// Param capacity: The capacity of the new stack. (Int, UInt or Real)
	/// Throws TypeConversionError:
	///          {capacity} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {capacity} is less than zero.
	public new(capacity)
	{
		capacity = int(capacity);
		if capacity < 0:
			throw new ArgumentRangeError("capacity");

		initialize(capacity);
	}

	private items; // Array
	private _length = 0;
	private version = 0;

	/// Summary: Gets the total number of items on the stack.
	/// Returns: The total number of items on the stack, as an Int.
	override get length = _length;

	/// Summary: Determines whether the stack is empty.
	/// Returns: True if the stack is empty; otherwise, false.
	public get isEmpty = _length == 0;

	/// Summary: Gets the capacity of the stack; that is, the number of items it
	///          can contain without resizing its internal container.
	/// Returns: The capacity of the stack, as an Int.
	public get capacity = items.length;
	/// Summary: Sets the capacity of the stack; that is, the number of items it
	///          can contain without resizing its internal container.
	/// Throws TypeConversionError:
	///          The value could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          The value is less than {length}.
	public set capacity
	{
		value = int(value);
		if value < _length:
			throw new ArgumentRangeError("value");

		if value != _length:
			setCapacity(value);
	}

	private initialize(capacity)
	{
		items = new Array(capacity);
	}

	/// Summary: Pushes a value onto the top of the stack.
	/// Param value: The value to push onto the stack.
	public push(value)
	{
		if _length == capacity:
			resize();

		items[_length] = value;
		_length += 1;
		version += 1;
	}

	/// Summary: Removes the top value from the stack, and returns it.
	/// Returns: The value that was removed from the top of the stack.
	public pop()
	{
		if _length == 0:
			throw new InvalidStateError(emptyStack);

		_length -= 1;

		var value = items[_length];
		items[_length] = null;
		version += 1;

		return value;
	}

	/// Summary: Returns the top value on the stack without removing it.
	/// Returns: The current top value on the stack.
	public peek()
	{
		if _length == 0:
			throw new InvalidStateError(emptyStack);

		return items[_length - 1];
	}

	/// Summary: Removes all the values from the stack, without affecting
	///          the capacity of the stack.
	public clear()
	{
		items.fill(null);
		_length = 0;
		version += 1;
	}

	private resize()
	{
		var newCapacity = math.max(defaultCapacity, _length * 2);
		setCapacity(newCapacity);
	}

	private setCapacity(newCapacity)
	{
		Array.resize(ref items, newCapacity);
	}

	override toString()
	{
		return "Stack[length = {0}]".format([length]);
	}

	iter
	{
		var startVersion = version;
		for i in [1 to _length]
		{
			if startVersion != version:
				throw new InvalidStateError("The stack has changed since the enumeration started.");
			yield items[_length - i];
		}
	}

	private const defaultCapacity = 4;

	private const emptyStack = "There are no items on the stack.";
}
