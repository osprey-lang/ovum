namespace aves;

public class Buffer
{
	__init_type("aves_Buffer_init");

	public new(size)						__extern("aves_Buffer_new");

	public get this[index] = readByte(index);
	public set this[index] { writeByte(index, value); }

	public get size							__extern("aves_Buffer_get_size");

	public readByte(index)					__extern("aves_Buffer_readByte");
	public readSByte(index)					__extern("aves_Buffer_readSbyte");
	public readInt16(index)					__extern("aves_Buffer_readInt16");
	public readInt32(index)					__extern("aves_Buffer_readInt32");
	public readInt64(index)					__extern("aves_Buffer_readInt64");
	public readUInt16(index)				__extern("aves_Buffer_readUInt16");
	public readUInt32(index)				__extern("aves_Buffer_readUInt32");
	public readUInt64(index)				__extern("aves_Buffer_readUInt64");
	public readFloat32(index)				__extern("aves_Buffer_readFloat32");
	public readFloat64(index)				__extern("aves_Buffer_readFloat64");

	public writeByte(index, value)			__extern("aves_Buffer_writeByte");
	public writeSByte(index, value)			__extern("aves_Buffer_writeSByte");
	public writeInt16(index, value)			__extern("aves_Buffer_writeInt16");
	public writeInt32(index, value)			__extern("aves_Buffer_writeInt32");
	public writeInt64(index, value)			__extern("aves_Buffer_writeInt64");
	public writeUInt16(index, value)		__extern("aves_Buffer_writeUInt16");
	public writeUInt32(index, value)		__extern("aves_Buffer_writeUInt32");
	public writeUInt64(index, value)		__extern("aves_Buffer_writeUInt64");
	public writeFloat32(index, value)		__extern("aves_Buffer_writeFloat32");
	public writeFloat64(index, value)		__extern("aves_Buffer_writeFloat64");

	/// Summary: Verifies that the specified range is inside the buffer.
	///          If the range is valid, this function returns successfully;
	///          otherwise, it throws an error as specified.
	/// Param offset: An offset into the buffer. (Int)
	/// Param count: The length of the range, in bytes. (Int)
	/// Throws ArgumentRangeError:
	///          {offset} is less than zero.
	///
	///          {count} is less than zero.
	/// Throws ArgumentError:
	///          {offset} + {count} is greater than the size of the buffer.
	/// Remarks: {offset} and {count} are not type-checked. It is assumed
	///          that the caller will convert both to ints.
	public verifyRange(offset, count)
	{
		if offset < 0:
			throw new ArgumentRangeError("offset");
		if count < 0:
			throw new ArgumentRangeError("count");
		if offset + count > size:
			throw new ArgumentError("offset + count must be less than or equal to the buffer size.");
	}

	override toString()
	{
		return "Buffer[size = {0}]".format([size]);
	}

	/// Summary: Extracts a {Buffer} from the specified value.
	/// Param buf: A {Buffer} or {BufferView} object.
	/// Returns: If {buf} is a {Buffer}, it is returned as-is. If it is
	///          a {BufferView}, the underlying buffer is returned.
	/// Throws ArgumentNullError:
	///          {buf} is null.
	/// Throws TypeError:
	///          {buf} is not a {Buffer} or {BufferView}.
	public static fromValue(buf)
	{
		if buf is null:
			throw new ArgumentNullError("buf");
		else if buf is BufferView:
			buf = buf.buffer;
		else if buf is not Buffer:
			throw new TypeError("buf must be an aves.Buffer or aves.BufferView.");
		return buf;
	}

	iter
	{
		var i = 0;
		while i < size
		{
			yield readByte(i);
			i += 1;
		}
	}
}

public class BufferView
{
	__init_type("aves_BufferView_init");

	public new(buf, kind)					__extern("aves_BufferView_new");

	public get this[index]					__extern("aves_BufferView_get_item");
	public set this[index]					__extern("aves_BufferView_set_item");

	public get length						__extern("aves_BufferView_get_length");

	public get buffer						__extern("aves_BufferView_get_buffer");
	public get kind							__extern("aves_BufferView_get_kind");

	override toString()
	{
		return "BufferView[kind = {0}, length = {1}]".format([kind, length]);
	}

	iter
	{
		var i = 0;
		while i < length
		{
			yield this[i];
			i += 1;
		}
	}
}

public enum BufferViewKind
{
	byte = 1,
	sbyte = 2,
	int16 = 3,
	int32 = 4,
	int64 = 5,
	uint16 = 6,
	uint32 = 7,
	uint64 = 8,
	float32 = 9,
	float64 = 10,
}