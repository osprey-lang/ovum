namespace aves;

/// Summary: Encapsulates the general category of a Unicode code point.
/// Remarks: The general category of a Unicode code point is, as the name implies, general.
///          That means it does not provide fine-grained details about every possible use of
///          that code point. Rather, it encodes the primary characteristic of the character.
///          For example, is it a letter, a mark, a number, punctuation, or a symbol – and if
///          so, of what type? Uppercase or lowercase letter, combining or spacing mark, and
///          so on.
public enum set UnicodeCategory
{
	none = 0,

	// The various values are specified explicitly here
	// in order to ensure they don't change for any reason,
	// as they are also used in native code.

	/// Summary: Combines the flags {uppercaseLetter}, {lowercaseLetter}, {titlecaseLetter},
	///          {modifierLetter} and {otherLetter}, which includes all Unicode categories that
	///          represent letters. Unicode designation L (letter).
	letter =
		uppercaseLetter |
		lowercaseLetter |
		titlecaseLetter |
		modifierLetter |
		otherLetter,
	/// Summary: Combines the flags {uppercaseLetter}, {lowercaseLetter} and {titlecaseLetter},
	///          which includes all Unciode characters that represent cased letters; that is,
	///          letters that make a case distinction. Unicode designation LC (letter, cased).
	casedLetter =
		uppercaseLetter |
		lowercaseLetter |
		titlecaseLetter,
	/// Summary: Uppercase letter. Unicode designation Lu (letter, uppercase).
	uppercaseLetter = 1 << 0,
	/// Summary: Lowercase letter. Unicode designation Ll (letter, lowercase).
	lowercaseLetter = 1 << 1,
	/// Summary: Titlecase letter. Unicode designation Lt (letter, titlecase).
	titlecaseLetter = 1 << 2,
	/// Summary: Modifier letter, which is a spacing character that indicates modification of a
	///          preceding character. Unicode designation Lm (letter, modifier).
	modifierLetter = 1 << 3,
	/// Summary: A letter that is not an uppercase, lowercase, titlecase or modifier letter.
	///          Unicode designation Lo (letter, other).
	otherLetter = 1 << 4,

	/// Summary: Combines the flags {nonspacingMark}, {spacingMark} and {enclosingMark}, which
	///          includes all Unicode categories that represent marks. Unicode designation M
	///          (mark).
	mark =
		nonspacingMark |
		spacingMark |
		enclosingMark,
	/// Summary: Nonspacing combining mark, which modifies a preceding character and has a zero
	///          advance width. Unicode designation Mn (mark, nonspacing).
	nonspacingMark = 1 << 5,
	/// Summary: Spacing combining mark, which modifies a preceding character and has a positive
	///          advance width. Unicode designation Mc (mark, spacing).
	spacingMark = 1 << 6,
	/// Summary: Enclosing combining mark, which modifies a preceding character. Unicode
	///          designation Me (mark, enclosing).
	enclosingMark = 1 << 7,

	/// Summary: Combines the flags {decimalNumber}, {letterNumber} and {otherNumber}, thus
	///          including all Unicode categories that represent numbers and digits. Unicode
	///          designation N (number).
	number =
		decimalNumber |
		letterNumber |
		otherNumber,
	/// Summary: A decimal digit character; that is, a digit representing a number between 0 and
	///          9. Unicode designation Nd (number, decimal digit).
	decimalNumber = 1 << 8,
	/// Summary: A numeral composed of letters or letterlike symbols (e.g. Roman numerals).
	///          Unicode designation Nl (number, letter).
	letterNumber = 1 << 9,
	/// Summary: A numeral that is neither a decimal digit ({decimalNumber}) nor composed of
	///          letters or letterlike symbols ({letterNumber}), e.g. superscript and subscript
	///          digits, vulgar fractions. Unicode designation No (number, other).
	otherNumber = 1 << 10,

	/// Summary: Combines the flags {connectorPunctuation}, {dashPunctuation}, {openPunctuation},
	///          {closePunctuation}, {initalQuotePunctuation}, {finalQuotePunctuation} and
	///          {otherPunctuation}, which includes all Unicode categories that represent
	///          punctuation characters. Unicode designation P (punctuation).
	punctuation =
		connectorPunctuation |
		dashPunctuation |
		openPunctuation |
		closePunctuation |
		initalQuotePunctuation |
		finalQuotePunctuation |
		otherPunctuation,
	/// Summary: Punctuation character that connects two characters. Unicode designation Pc
	///          (punctuation, connector).
	connectorPunctuation = 1 << 11,
	/// Summary: Dash or hyphen character. Unicode designation Pd (punctuation, dash).
	/// Remarks: This category does not include the soft hyphen character (U+00AD, `'\-'`), which
	///          is a {control} character.
	dashPunctuation = 1 << 12,
	/// Summary: Opening character of a paired punctuation mark, such as parentheses, square
	///          brackets or braces. Unicode designation Ps (punctuation, open).
	openPunctuation = 1 << 13,
	/// Summary: Closing character of a paired punctuation mark, such as parentheses, square
	///          brackets or braces. Unicode designation Pe (punctuation, close).
	closePunctuation = 1 << 14,
	/// Summary: Initial or opening quote character. Unicode designation Pi (punctuation, initial
	///          quote).
	/// Remarks: Note that the usage of quote characters varies between languages, and that this
	///          category is not always meaningful. For example, English uses «“» as an initial
	///          quote (“example”), while German uses it as a final quote („Beispiel“).
	initalQuotePunctuation = 1 << 15,
	/// Summary: Final or closing quote character. Unicode designation Pf (punctuation, final
	///          quote).
	/// Remarks: Note that the usage of quote characters varies between languages, and that this
	///          category is not always meaningful. For example, English uses «“» as an initial
	///          quote (“example”), while German uses it as a final quote („Beispiel“).
	finalQuotePunctuation = 1 << 16,
	/// Summary: Punctuation character that is not a connector character, dash, hyphen, opening
	///          or closing punctuation mark, or an initial or final quote. Unicode designation
	///          Po (punctuation, other).
	otherPunctuation = 1 << 17,

	/// Summary: Combines the flags {mathSymbol}, {currencySymbol}, {modifierSymbol} and
	///          {otherSymbol}, which includes all Unicode categories that represent symbols.
	///          Unicode designation S (symbol).
	symbol =
		mathSymbol |
		currencySymbol |
		modifierSymbol |
		otherSymbol,
	/// Summary: Math symbol. Unicode designation Sm (symbol, math).
	mathSymbol = 1 << 18,
	/// Summary: Currency symbol. Unicode designation Sc (symbol, currency).
	currencySymbol = 1 << 19,
	/// Summary: Modifier symbol, which combines with a preceding character. Unicode designation
	///          Sk (symbol, modifier).
	modifierSymbol = 1 << 20,
	/// Summary: A symbol that is not a math, currency or modifier symbol. Unicode designation
	///          So (symbol, other).
	otherSymbol = 1 << 21,

	/// Summary: Combines the flags {spaceSeparator}, {lineSeparator} and {paragraphSeparator},
	///          which includes (almost, see remarks) all Unicode categories that represent white
	///          space.
	/// Remarks: Unicode contains six additional characters that are usually classified as white
	///          space, despite belonging to the category {control}. They are:
	///
	///          * U+0009 (`'\t'`, Character Tabulation)
	///          * U+000A (`'\n'`, Line Feed)
	///          * U+000B (Line Tabulation)
	///          * U+000C (Form Feed)
	///          * U+000D (`'\r'`, Carriage Return)
	///          * U+0085 (Next Line)
	///
	///          {String.isWhiteSpace} and {Char.isWhiteSpace} return true for these characters.
	///          It is recommended that those methods be used to check whether a character should
	///          be considered white space.
	separator =
		spaceSeparator |
		lineSeparator |
		paragraphSeparator,
	/// Summary: Space character. See remarks of {separator} for details. Unicode designation Zs
	///          (separator, space).
	spaceSeparator = 1 << 22,
	/// Summary: Line separator, which includes the single character U+2028 (Line Separator).
	///          Unicode designation Zl (separator, line).
	lineSeparator = 1 << 23,
	/// Summary: Paragraph separator, which includes the single character U+2029 (Paragraph
	///          Separator). Unicode designation Zp (separator, paragraph).
	paragraphSeparator = 1 << 24,

	/// Summary: Combines the flags {control}, {format}, {surrogate}, {privateUse} and
	///          {unassigned}. Unicode designation C (other).
	other =
		control |
		format |
		surrogate |
		privateUse |
		unassigned,
	/// Summary: Control character. Unicode designation Cc (other, control).
	/// Remarks: This category includes the following characters that are normally considered
	///          white space:
	///
	///          * U+0009 (`'\t'`, Character Tabulation)
	///          * U+000A (`'\n'`, Line Feed)
	///          * U+000B (Line Tabulation)
	///          * U+000C (Form Feed)
	///          * U+000D (`'\r'`, Carriage Return)
	///          * U+0085 (Next Line)
	///
	///          To determine whether a character should be considered white space, the methods
	///          {String.isWhiteSpace} and {Char.isWhiteSpace} are recommended to be used, since
	///          those methods test for {separator} as well as the six control characters listed
	///          above.
	control = 1 << 25,
	/// Summary: Format character. Unicode designation Cf (other, format).
	format = 1 << 26,
	/// Summary: One half of a surrogate pair. This category does not divulge which half the
	///          character represents. Unicode designation Cs (other, surrogate).
	surrogate = 1 << 27,
	/// Summary: Private-use character. Unicode designation Co (other, private use).
	privateUse = 1 << 28,
	/// Summary: Character that is not assigned to any Unicode category. Unicode designation Cn
	///          (other, not assigned).
	unassigned = 1 << 29,
}
