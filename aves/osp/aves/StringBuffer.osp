namespace aves;

public class StringBuffer
{
	__init_type("aves_StringBuffer_init");

	public new()							__extern("aves_StringBuffer_new");
	public new(capacity)					__extern("aves_StringBuffer_newCap");

	public get length						__extern("aves_StringBuffer_get_length");
	public get capacity						__extern("aves_StringBuffer_get_capacity");

	public append(value)
	{
		return appendInternal(string(value), 1);
	}
	public append(value, times)
	{
		return appendInternal(string(value), int(times));
	}

	public appendLine()						__extern("aves_StringBuffer_appendLine");
	public appendLine(value)
	{
		appendInternal(string(value), 1);
		return appendLine();
	}

	public appendCodepoint(codepoint)
	{
		codepoint = int(codepoint);
		if codepoint < 0 or codepoint > 0x10FFFF:
			throw new ArgumentRangeError("codepoint");
		return appendCodepointInternal(codepoint);
	}

	public insert(index, value)
	{
		return insertInternal(int(index), string(value));
	}

	override toString()						__extern("aves_StringBuffer_toString");

	private appendInternal(value, times)	__extern("aves_StringBuffer_appendInternal");
	private appendCodepointInternal(cp)		__extern("aves_StringBuffer_appendCodepointInternal");
	private insertInternal(index, value)	__extern("aves_StringBuffer_insertInternal");
}