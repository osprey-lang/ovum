namespace aves;

/// Summary: Exposes a read-only interface that can be used to iterate
///          over a specific object.
/// Remarks: Unlike {Iterator} objects, {Iterable} can be iterated
///          over any number of times. Because {Iterator} instances
///          can only be iterated over once, you cannot pass such
///          an instance into the {Iterable} constructor.
public inheritable Iterable
{
	/// Summary: Creates a new Iterable representing an empty collection.
	public new()
	{
		collection = null;
	}
	/// Summary: Creates a new Iterable for the specified collection.
	/// Param collection: The collection to create an iterable wrapper for.
	///          If this value is null, it is treated like an empty collection.
	/// Throws ArgumentNullError: {collection} is null.
	/// Throws ArgumentError: {collection} is of a type derived from {Iterator}.
	public new(collection)
	{
		if collection is null:
			throw new ArgumentNullError("collection");
		if collection is Iterator:
			throw new ArgumentError("The collection cannot be of a type derived from Iterator.", "collection");

		this.collection = collection;
	}

	private collection;

	public any(predicate)
	{
		return this.iter.any(predicate);
	}

	public all(predicate)
	{
		return this.iter.all(predicate);
	}

	/// Summary: Counts the items in the collection.
	/// Returns: The number of items in the collection, as an Int.
	public count()
	{
		var length = 0;
		var iterator = this.iter;
		while iterator.moveNext():
			length += 1;
		return length;
	}
	/// Summary: Counts all the items in the collection that match the
	///          the specified predicate.
	/// Param predicate: An invokable value that takes one argument
	///          (the current element) and returns a truthy value if
	///          the element matches the predicate, or a falsy value
	///          otherwise.
	/// Returns: The number of items that match {predicate}, as an Int.
	/// Throws ArgumentNullError: {predicate} is null.
	public count(predicate)
	{
		if predicate is null:
			throw new ArgumentNullError("predicate");

		var length = 0;
		var iterator = this.iter;
		while iterator.moveNext():
			if predicate(iterator.current):
				length += 1;
		return length;
	}

	public each(func)
	{
		if func is null:
			throw new ArgumentNullError("func");

        this.iter.each(func);
	}

	public filter(predicate)
	{
		if predicate is null:
			throw new ArgumentNullError("predicate");

		return new FilterIterable(this, predicate);
	}

	public first()
	{
		return this.iter.first();
	}
	public first(predicate)
	{
		return this.iter.first(predicate);
	}

	public firstOrNull()
	{
		return this.iter.firstOrNull();
	}
	public firstOrNull(predicate)
	{
		return this.iter.firstOrNull(predicate);
	}

	public fold(func)
	{
		return this.iter.fold(func);
	}
	public fold(init, func)
	{
		return this.iter.fold(init, func);
	}

	public join(sep)
	{
		return this.iter.join(sep);
	}

	public group(func)
	{
		if func is null:
			throw new ArgumentNullError("func");

		return new GroupIterable(this, func);
	}
	public group(keyFunc, valueFunc)
	{
		if keyFunc is null:
			throw new ArgumentNullError("keyFunc");
		if valueFunc is null:
			throw new ArgumentNullError("valueFunc");

		return new GroupIterable(this, keyFunc, valueFunc);
	}

	public groupEvery(frequency)
	{
		frequency = int(frequency);
		if frequency < 0:
			throw new ArgumentRangeError("frequency");

		return new GroupEveryIterable(this, frequency);
	}

	public intersperse(value)
	{
		return new IntersperseIterable(this, value);
	}
	public intersperse(value, frequency)
	{
		frequency = int(frequency);
		if frequency <= 0:
			throw new ArgumentRangeError("frequency");

		return new IntersperseIterable(this, value, frequency);
	}

	public last()
	{
		return this.iter.last();
	}
	public last(predicate)
	{
		return this.iter.last(predicate);
	}

	public lastOrNull()
	{
		return this.iter.lastOrNull();
	}
	public lastOrNull(predicate)
	{
		return this.iter.lastOrNull(predicate);
	}

	public map(func)
	{
		if func is null:
			throw new ArgumentNullError("func");

		return new MapIterable(this, func);
	}

	public take(count)
	{
		count = int(count);
		if count < 0:
			throw new ArgumentRangeError("count");

		return new TakeIterable(this, count);
	}

	public skip(count)
	{
		count = int(count);
		if count < 0:
			throw new ArgumentRangeError("count");

		return new SkipIterable(this, count);
	}

	iter
	{
		if collection is null:
			return Iterator.empty;
		return collection.iter;
	}

	public static range(start, count)
	{
		start = int(start);
		count = int(count);
		if count < 0:
			throw new ArgumentRangeError("count");

		return new RangeIterable(start, count);
	}
}

private class FilterIterable is Iterable
{
	public new(this.inner, this.predicate);

	private inner, predicate;

	iter
	{
		return inner.iter.filter(predicate);
	}
}

private class MapIterable is Iterable
{
	public new(this.inner, this.func);

	private inner, func;

	iter
	{
		return inner.iter.map(func);
	}
}

private class IntersperseIterable is Iterable
{
	public new(this.inner, this.value);
	public new(this.inner, this.value, this.frequency);

	private inner, value, frequency = -1;

	iter
	{
		var i = inner.iter;
		if frequency > 0:
			return i.intersperse(value, frequency);
		else
			return i.intersperse(value);
	}
}

private class GroupIterable is Iterable
{
	public new(this.inner, this.keyFunc);
	public new(this.inner, this.keyFunc, this.valueFunc);

	private inner, keyFunc, valueFunc;

	iter
	{
		if valueFunc is not null:
			return inner.iter.group(keyFunc, valueFunc);
		return inner.iter.group(keyFunc);
	}
}

private class GroupEveryIterable is Iterable
{
	public new(this.inner, this.frequency);

	private inner, frequency;

	iter
	{
		return inner.iter.groupEvery(frequency);
	}
}

private class TakeIterable is Iterable
{
	public new(this.inner, this.takeCount);

	private inner, takeCount;

	iter
	{
		return inner.iter.take(takeCount);
	}
}

private class SkipIterable is Iterable
{
	public new(this.inner, this.skipCount);

	private inner, skipCount;

	iter
	{
		return inner.iter.skip(skipCount);
	}
}

private class RangeIterable is Iterable
{
	public new(this.start, this.rangeCount);

	private start, rangeCount;

	iter
	{
		var i = start;
		var end = start + rangeCount;
		while i < end
		{
			yield i;
			i += 1;
		}
	}
}