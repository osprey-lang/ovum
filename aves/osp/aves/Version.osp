namespace aves;

/// Summary: Represents a version number.
/// Remarks: A version number consists of three numeric components, called the major version,
///          minor version, and patch version, respectively. A version number must specify a
///          value for each component; “partial” version numbers are not allowed.
///
///          This class is compatible with the Semantic Versioning specification 2.0.0
///          (http://semver.org/spec/2.0.0.html), except that pre-release versions, such as
///          `2.3.1-rc`, are not supported.
public class Version
{
	/// Summary: Creats a new {Version} with the specified major, minor and build version.
	/// Param major: The major version. (Int, UInt or Real)
	/// Param minor: The minor version. (Int, UInt or Real)
	/// Param patch: The patch version. (Int, UInt or Real)
	/// Throws TypeConversionError:
	///          {major}, {minor} or {patch} could not be converted to an int.
	/// Throws ArgumentRangeError:
	///          {major}, {minor} or {patch} is less than zero.
	public new(major, minor, patch)
	{
		this._major = getComponent("major", major);
		this._minor = getComponent("minor", minor);
		this._patch = getComponent("patch", patch);
	}

	private _major;
	/// Summary: Gets the major component of the version number.
	/// Returns: The major component of the version number, as an Int.
	public get major => _major;

	private _minor;
	/// Summary: Gets the minor component of the version number.
	/// Returns: The minor component of the version number, as an Int.
	public get minor => _minor;

	private _patch;
	/// Summary: Gets the patch component of the version number.
	/// Returns: The patch component of the version number, as an Int
	public get patch => _patch;

	override getHashCode()
	{
		// Most version numbers are likely to be quite small; it's probably
		// okay to just OR together some of the lower bits.
		var result = _patch & 0xfff;
		result |= _minor & 0xff << 12;
		result |= _major & 0x0f << 20;

		return result;
	}

	override toString()
	{
		return "{0}.{1}.{2}".format([major, minor, patch]);
	}

	private static getComponent(paramName, value)
	{
		value = int(value);
		if value < 0 {
			throw new ArgumentRangeError(paramName);
		}
		return value;
	}

	operator ==(a, b)
	{
		return b is Version and
			a._major == b._major and
			a._minor == b._minor and
			a._patch == b._patch;
	}

	operator <=>(a, b)
	{
		if b is not Version {
			throw new ArgumentTypeError("b", typeof(Version));
		}

		if a._major != b._major {
			return a._major <=> b._major;
		}
		if a._minor != b._minor {
			return a._minor <=> b._minor;
		}
		if a._patch != b._patch {
			return a._patch <=> b._patch;
		}

		return 0;
	}
}
