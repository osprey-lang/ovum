namespace aves.reflection;

public class Overload is Member
{
	__init_type("aves_reflection_Overload_init");

	public new(handle, method, index)
		__extern("aves_reflection_Overload_new");

	override get kind = MemberKind.overload;

	override get accessibility = method.accessibility;

	override get name = method.name;

	override get fullName = method.fullName;

	override get declaringType = method.declaringType;

	override get declaringModule = method.delaringModule;

	private get handle
		__extern("aves_reflection_Overload_get_handle");

	/// Summary: Gets the method that the overload belongs to, as a {MethodBase}.
	public get method
		__extern("aves_reflection_Overload_get_method");

	/// Summary: Gets the index of the overload within the {method}, as an Int.
	public get index
		__extern("aves_reflection_Overload_get_index");

	/// Summary: Gets a value that indicates whether the overload belongs to a public method.
	/// Returns: True if the overload belongs to a public method; otherwise, false.
	public get isPublic = method.isPublic;

	/// Summary: Gets a value that indicates whether the overload belongs to a protected method.
	/// Returns: True if the overload belongs to a protected method; otherwise, false.
	public get isProtected = method.isProtected;

	/// Summary: Gets a value that indicates whether the overload belongs to a private method.
	/// Returns: True if the overload belongs to a private method; otherwise, false.
	public get isPrivate = method.isPrivate;

	/// Summary: Gets a value that indicates whether the overload belongs to a global function.
	/// Returns: True if the overload belongs to a global function; otherwise, false.
	public get isGlobal = method.isGlobal;

	/// Summary: Gets a value that indicates whether the overload is static.
	/// Returns: True if the overload is static; otherwise, false.
	public get isStatic = method.isStatic;

	/// Summary: Gets a value that indicates whether the overload belongs to a constructor.
	/// Returns: True if the overload belongs to a constructor; otherwise, false.
	public get isConstructor = method.isConstructor;

	/// Summary: Gets a value that indicates whether the overloadâ€™s containing method has the
	///          `impl` flag. A method with this flag is typically an internal implementation
	///          detail, such as property accessor or an operator method.
	/// Returns: True if the containing method has the `impl` flag; otherwise, false.
	public get isImpl = method.isImpl;

	/// Summary: Gets a value that indicates whether the overload is overridable.
	/// Returns: True if the overload is overridable; otherwise, false.
	public get isOverridable
		__extern("aves_reflection_Overload_get_isOverridable");

	/// Summary: Gets a value that indicates whether the overload is abstract.
	/// Returns: True if the overload is abstract; otherwise, false.
	public get isAbstract
		__extern("aves_reflection_Overload_get_isAbstract");

	/// Summary: Gets a value that indicates whether the overload is variadic.
	/// Returns: True if the overload is variadic; otherwise, false.
	public get isVariadic
		__extern("aves_reflection_Overload_get_isVariadic");

	/// Summary: Gets a value that indicates whether the overload has a native-code implementation.
	/// Returns: True if the overload has a native-code implementation; otherwise, false.
	public get isNative
		__extern("aves_reflection_Overload_get_isNative");

	/// Summary: Gets the total number of parameters the overload has.
	/// Returns: The number of parameters in the overload, as an Int.
	public get paramCount
		__extern("aves_reflection_Overload_get_paramCount");

	/// Summary: Gets metadata for the parameter at the specified index.
	/// Param index: The index of the parameter to get. (Int, UInt or Real)
	/// Returns: A {Parameter} object for the parameter at the specified index.
	/// Throws TypeConversionError:
	///          {index} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {index} is less than zero, or greater than or equal to {paramCount}.
	public getParameter(index)
	{
		index = int(index);
		if index < 0 or index >= paramCount:
			throw new ArgumentRangeError("index");

		return new Parameter(this, index);
	}

	/// Summary: Gets metadata for all of the parameters in the overload.
	/// Returns: A List of {Parameter} objects for each parameter in the overload.
	public getParameters()
	{
		var output = new List(paramCount);
		for i in [0 to paramCount - 1]:
			output.add(new Parameter(this, i));

		return output;
	}

	override toString()
	{
		return "<Overload {0} of {1}>".format([index, fullName]);
	}

	/// Summary: Gets an {Overload} object that represents the currently executing
	///          method overload.
	/// Returns: An {Overload} object for the current executing overload.
	public static getCurrentOverload()
		__extern("aves_reflection_Overload_getCurrentOverload", locals=1);

	operator ==(a, b)
	{
		return b is Overload and a.handle == b.handle;
	}
}
