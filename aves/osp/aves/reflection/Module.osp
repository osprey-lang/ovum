namespace aves.reflection;

public class Module
{
	__init_type("aves_reflection_Module_init");

	public new(handle)
		__extern("aves_reflection_Module_new");

	private get handle
		__extern("aves_reflection_Module_get_handle");

	/// Summary: Gets the name of the module.
	/// Returns: The name of the module, as a String.
	public get name
		__extern("aves_reflection_Module_get_name");

	/// Summary: Gets the version of the module.
	/// Returns: The version of the module, as a {Version}.
	public get version
		__extern("aves_reflection_Module_get_version");

	/// Summary: Gets the full name and path of the file that the module
	///          was loaded from.
	/// Returns: The file name that the module was loaded from, as a String.
	public get fileName
		__extern("aves_reflection_Module_get_fileName");

	public getType(name)
	{
		return getType(string(name), defaultSearchFlags);
	}
	public getType(name, flags)
		__extern("aves_reflection_Module_getType");

	public getTypes()
	{
		return getTypes(defaultSearchFlags);
	}
	public getTypes(flags)
		__extern("aves_reflection_Module_getTypes", locals=1);

	public getFunction(name)
	{
		return getFunction(string(name), defaultSearchFlags);
	}
	public getFunction(name, flags)
		__extern("aves_reflection_Module_getFunction");

	public getFunctions()
	{
		return getFunctions(defaultSearchFlags);
	}
	public getFunctions(flags)
		__extern("aves_reflection_Module_getFunctions", locals=1);

	public getGlobalConstant(name)
	{
		return getGlobalConstant(string(name), defaultSearchFlags);
	}
	public getGlobalConstant(name, flags)
		__extern("aves_reflection_Module_getGlobalConstant");

	public getGlobalConstants()
	{
		return getGlobalConstants(defaultSearchFlags);
	}
	public getGlobalConstants(flags)
		__extern("aves_reflection_Module_getGlobalConstants", locals=1);

	public getMember(name)
	{
		return getMember(string(name), defaultSearchFlags);
	}
	public getMember(name, flags)
		__extern("aves_reflection_Module_getMember");

	public getMembers()
	{
		return getMembers(defaultSearchFlags);
	}
	public getMembers(flags)
		__extern("aves_reflection_Module_getMembers", locals=1);

	override toString()
	{
		return "<Module {0}, version={1}>".format([name, version]);
	}

	public static getCurrentModule()
		__extern("aves_reflection_Module_getCurrentModule");

	/// Summary: Gets the directories that are searched when loading modules
	///          by name.
	/// Returns: A List containing the directories (as Strings) that are
	///          searched when loading modules by name.
	/// Remarks: The VM tries several different paths within each directory.
	///          The directories are returned in the order they are searched.
	public static getSearchDirectories()
		__extern("aves_reflection_Module_getSearchDirectories", locals=1);

	/// Summary: Finds a loaded module with the specified name.
	/// Param name: The name of the module to find.
	/// Returns: The module with the specified name, or null if no such
	///          module is loaded.
	/// Remarks: If multiple modules with the specified name are loaded,
	///          this method returns only the first encountered module.
	///          That module is not guaranteed to have any specific
	///          version number.
	/// Throws ArgumentNullError:
	///          {name} is null.
	public static find(name)
	{
		if name is null:
			throw new ArgumentNullError("name");
		name = string(name);
		return findInternal(name, null);
	}
	/// Summary: Finds a loaded module with the specified name and version.
	/// Param name: The name of the module to find.
	/// Param version: The version of the module to find. (aves.Version)
	/// Returns: The module with the specified name and version, or null if
	///          no such module is loaded.
	/// Throws ArgumentNullError:
	///          {name} or {version} is null.
	/// Throws TypeError:
	///          {version} is not a {Version}.
	public static find(name, version)
	{
		if name is null:
			throw new ArgumentNullError("name");
		name = string(name);
		if version is null:
			throw new ArgumentNullError("version");
		if version is not Version:
			throw new TypeError("version must be an aves.Version.");
		return findInternal(name, version);
	}

	private static findInternal(name, version)
		__extern("aves_reflection_Module_find");

	operator ==(a, b)
	{
		return b is Module and a.handle == b.handle;
	}

	private const defaultSearchFlags =
		MemberSearchFlags.\public |
		MemberSearchFlags.\static;
}
