namespace aves.reflection;

public class Property is Member
{
	__init_type("aves_reflection_Property_init");

	public new(handle)
		__extern("aves_reflection_Property_new");

	private get handle
		__extern("aves_reflection_Property_get_handle");

	override get kind = MemberKind.property;

	override get accessibility
		__extern("aves_reflection_Property_get_accessibility");

	override get name
		__extern("aves_reflection_Property_get_name");

	private get _fullName
		__extern("aves_reflection_Property_get_f_fullName");
	private set _fullName
		__extern("aves_reflection_Property_set_f_fullName");

	override get fullName
	{
		if _fullName is null:
			_fullName = declaringType.fullName :: "." :: name;
		return _fullName;
	}

	override get declaringType
		__extern("aves_reflection_Property_get_declaringType");

	override get declaringModule			//__extern("aves_reflection_Property_get_declaringModule");
	{
		// Not implemented just yet
		throw new NotSupportedError();
	}

	/// Summary: Gets a value that indicates whether the property is public.
	/// Returns: True if the property is public; otherwise, false.
	public get isPublic = accessibility == Accessibility.isPublic;

	/// Summary: Gets a value that indicates whether the property is protected.
	/// Returns: True if the property is protected; otherwise, false.
	public get isProtected = accessibility == Accessibility.isProtected;

	/// Summary: Gets a value that indicates whether the property is private.
	/// Returns: True if the property is private; otherwise, false.
	public get isPrivate = accessibility == Accessibility.isPrivate;

	/// Summary: Gets a value that indicates whether the property is static.
	/// Returns: True if the property is static; otherwise, false.
	public get isStatic
		__extern("aves_reflection_Property_get_isStatic");

	/// Summary: Gets a value that indicates whether the property is readable.
	/// Returns: True if the property is readable; otherwise, false.
	public get canRead
		__extern("aves_reflection_Property_get_canRead");

	/// Summary: Gets a value that indicates whether the property is writable.
	/// Returns: True if the property is writable; otherwise, false.
	public get canWrite
		__extern("aves_reflection_Property_get_canWrite");

	/// Summary: Gets the {Method} that implements the property’s getter,
	///          or null if the property is write-only.
	public get getterMethod
		__extern("aves_reflection_Property_get_getterMethod");

	/// Summary: Gets the {Method} that implements the property’s setter,
	///          or null if the property is read-only.
	public get setterMethod
		__extern("aves_reflection_Property_get_setterMethod");

	override toString()
	{
		return "<Property {0}>".format([fullName]);
	}

	operator ==(a, b)
	{
		return b is Property and a.handle == b.handle;
	}
}
