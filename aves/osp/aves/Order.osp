namespace aves;

/// Summary: Exposes helper methods primarily used when sorting collections.
public static class Order
{
	/// Summary: Returns the specified value verbatim, to preserve its sort order. This is the
	///          identity function.
	/// Param value: The value to return.
	/// Returns: The contents of {value}.
	/// Remarks: The purpose of this method is to serve as a semantically meaningful alternative
	///          to {reverse}. Since it is just the identity function, you can replace it with
	///          any other function that just returns its argument.
	public static default(value)
	{
		return value;
	}

	/// Summary: Returns a wrapper around the specified value, which is sorted in the reverse
	///          order.
	/// Param value: The value whose sort order to reverse.
	/// Returns: A wrapper around {value} that reverses the sort order of {value}. See remarks.
	/// Remarks: The returned object exposes nothing more than the `<=>` operator, which calls
	///          through to {value}â€™s implementation of the `<=>` operator. The second operand
	///          must be of the same wrapper type.
	///
	///          This method is useful when calling {Iterable.sortBy}. By employing function
	///          composition, it is possible to reverse the order of a sorted sequence:
	///
	///          ```
	///          var numbers = [4, 2, 0, -3, 5, -6, -1];
	///          var reverse = numbers.sortBy(math.abs >> Order.reverse);
	///          print(reverse.join(", "));
	///          ```
	///
	///          Note that you can use {reverse} as a sort key selector on its own:
	///
	///          ```
	///          var numbers = [4, 2, 0, -3, 5, -6, -1];
	///          print(numbers.sortBy(Order.reverse).join(", "));
	///          ```
	///
	///          will output:
	///
	///          ```
	///          5, 4, 2, 0, -1, -3, -6
	///          ```
	///
	///          One may of course also invoke this method in a perfectly normal fashion, like
	///          so:
	///
	///          ```
	///          list.sortBy(@item => Order.reverse(item.getSortKey()))
	///          ```
	public static reverse(value)
	{
		return new ReverseOrdering(value);
	}
}

private class ReverseOrdering
{
	public new(this.value);

	private value;

	operator <=>(a, b)
	{
		if b is not ReverseOrdering:
			throw new ArgumentTypeError("b");
		return -(a.value <=> b.value);
	}
}
