namespace aves;

/// Summary: Represents a mutable, dynamically sized sequence of values. The values in a List
///          can be accessed by numeric index, starting at zero.
/// Remarks: The list is one of the fundamental collection types, alongside {Hash}, {Set} and
///          {Array}.
public inheritable List is Collection
{
	__init_type("aves_List_init");

	/// Summary: Creates a new, empty list with the default capacity.
	public new()
		__extern("aves_List_new");
	/// Summary: Creates a new, empty list with the specified capacity.
	/// Param capacity: The capacity of the new list. (Int, UInt or Real)
	/// Throws TypeConversionError:
	///          {capacity} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {capacity} is less than zero, or greater than 2,147,483,647 (0x7fffffff).
	public new(capacity)
		__extern("aves_List_newCap");

	/// Summary: Gets the item at the specified index.
	/// Param index: The index of the item to set. (Int, UInt or Real)
	/// Returns: The item at the specified index.
	/// Throws TypeConversionError:
	///          {index} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {index} is less than zero or greater than or equal to {length}.
	public get this[index]
		__extern("aves_List_get_item");
	/// Summary: Sets the item at the specified index.
	/// Param index: The index of the item to set. (Int, UInt or Real)
	/// Throws TypeConversionError:
	///          {index} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {index} is less than zero or greater than or equal to {length}.
	public set this[index]
		__extern("aves_List_set_item");

	/// Summary: Gets the total number of items contained in the list.
	/// Returns: The total number of items actually contained in the list, as an Int.
	override get length
		__extern("aves_List_get_length");

	/// Summary: Gets the capacity of the list; that is, the number of items it can contain
	///          before needing to be resized.
	/// Returns: The capacity of the list, as an Int.
	public get capacity
		__extern("aves_List_get_capacity");
	/// Summary: Sets the capacity of the list; that is, the number of items it can contain
	///          before needing to be resized.
	/// Throws TypeConversionError:
	///          The value could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          The value is less than {length}.
	public set capacity
		__extern("aves_List_set_capacity");

	private get version
		__extern("aves_List_get_version");

	/// Summary: Determines whether the list is empty.
	/// Returns: True if the list has no items in it; otherwise, false.
	public get isEmpty => length == 0;

	/// Summary: Adds an item to the end of the list.
	/// Param item: The item to add.
	/// Returns: The index at which the item was inserted.
	public add(item)
		__extern("aves_List_add");

	/// Summary: Inserts an item at the specified index.
	/// Param index: The index at which to insert the item. (Int, UInt or Real)
	/// Param item: The item to insert into the list.
	/// Throws TypeConversionError:
	///          {index} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {index} is less than zero or greater than {length}.
	/// Remarks: If {index} is equal to {length}, then the item is inserted at the end of the
	///          list.
	public insert(index, item)
		__extern("aves_List_insert");

	/// Summary: Determines whether the list contains the specified item.
	/// Param item: The item to look for.
	/// Returns: True if the item is in the list; otherwise, false.
	/// Remarks: Items are compared for equality using the `==` operator, invoked on {item}.
	public contains(item)
	{
		return indexOf(item) is not null;
	}

	/// Summary: Returns the index of the first occurrence of the specified item within this
	///          list.
	/// Param item: The item to look for.
	/// Returns: The index of the first occurrence of {item} within the list, as an Int, or null
	///          if it could not be found.
	/// Remarks: Items are compared for equality using the `==` operator, invoked on {item}.
	public indexOf(item)
	{
		return indexOfInternal(item, 0, length);
	}
	/// Summary: Returns the index of the first occurrence of the specified item within this
	///          list. The search starts at the specified index.
	/// Param item: The item to look for.
	/// Param startIndex: The index to start the search at. (Int, UInt or Real)
	/// Returns: The index of the first occurrence of {item} within the list, as an Int, or null
	///          if it could not be found. If found, the return value is greater than or equal to
	///          {startIndex}.
	public indexOf(item, startIndex)
	{
		startIndex = int(startIndex);
		if startIndex < 0 or startIndex > length {
			throw new ArgumentRangeError("startIndex");
		}

		return indexOfInternal(item, startIndex, length);
	}
	/// Summary: Returns the index of the first occurrence of the specified item within this
	///          list. The search spans over the specified region of the list.
	/// Param item: The item to look for.
	/// Param startIndex: The index to start the search at. (Int, UInt or Real)
	/// Param count: The total number of items to test against. The search is aborted when this
	///          many items have been tested without a match. (Int, UInt or Real)
	/// Returns: The index of the first occurrence of {item} within the specified region of the
	///          list, as an Int, or null if it could not be found. If found, the return value is
	///          greater than or equal to {startIndex}.
	/// Throws TypeConversionError:
	///          {startIndex} or {count} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	///
	///          {count} is less than zero.
	/// Throws ArgumentError:
	///          {startIndex} + {count} is greater than {length}.
	public indexOf(item, startIndex, count)
	{
		startIndex = int(startIndex);
		if startIndex < 0 or startIndex > length {
			throw new ArgumentRangeError("startIndex");
		}
		count = int(count);
		if count < 0 {
			throw new ArgumentRangeError("count");
		}
		if startIndex + count > length {
			throw new ArgumentError("startIndex + count is outside the list.");
		}

		return indexOfInternal(item, startIndex, startIndex + count);
	}

	private indexOfInternal(item, startIndex, endIndex)
	{
		while startIndex < endIndex {
			if item == this[startIndex] {
				return startIndex;
			}
			startIndex += 1;
		}

		return null;
	}

	/// Summary: Returns the index of the last occurrence of the specified item within this list,
	///          or null if it could not be found.
	/// Param item: The item to look for.
	/// Returns: The index of the last occurrence of {item} within the list, as an Int, or null
	///          if it could not be found.
	public lastIndexOf(item)
	{
		var i = length - 1;
		while i >= 0 {
			if item == this[i] {
				return i;
			}
			i -= 1;
		}

		return null;
	}

	/// Summary: Removes the first occurrence of the specified item from this list.
	/// Param item: The item to remove.
	/// Returns: True if the item was in the list; otherwise, false.
	public remove(item)
	{
		var index = indexOf(item);
		if index is not null {
			removeAt(index);
			return true;
		}
		return false;
	}

	/// Summary: Removes the item at the specified index.
	/// Param index: The index to remove an item from. (Int, UInt or Real)
	/// Throws TypeConversionError:
	///          {index} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {index} is less than zero or greater than or equal to {length}.
	public removeAt(index)
		__extern("aves_List_removeAt");

	/// Summary: Removes all items from the list.
	public clear()
		__extern("aves_List_clear");

	/// Summary: Concatenates the specified list onto the current list.
	/// Param other: The list to concatenate onto this list. (List)
	/// Returns: A new List containing the items from this list immediately followed by the items
	///          of {other}.
	/// Throws ArgumentNullError:
	///          {other} is null.
	/// Throws ArgumentTypeError:
	///          {other} is not a List.
	/// Remarks: This method returns a new list. It does not modify the original value in any
	///          way.
	public concat(other)
	{
		if other is null {
			throw new ArgumentNullError("other");
		}
		if other is not List {
			throw new ArgumentTypeError("other", typeof(List));
		}

		return concatInternal(other);
	}
	private concatInternal(other)
		__extern("aves_List_concatInternal", locals=1);

	/// Summary: Creates a new list with items from this list, starting at the specified index,
	///          up to the end of this list.
	/// Param startIndex: The index at which to start reading items. (Int, UInt or Real)
	/// Returns: A new List containing items from this list, starting at index {startIndex} to
	///          the end of this list.
	/// Throws TypeConversionError:
	///          {startIndex} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	/// Remarks: If {startIndex} is equal to {length}, the returned list will be empty.
	public slice(startIndex)
		__extern("aves_List_slice1", locals=1);
	/// Summary: Creates a new list with the specified number of items from this list, starting
	///          at the specified index.
	/// Param startIndex: The index at which to start reading items. (Int, UInt or Real)
	/// Param count: The total number of items to copy from the list. (Int, UInt or Real)
	/// Returns: A new List containing {count} items from this list, starting at index
	///          {startIndex}.
	/// Throws TypeConversionError:
	///          {startIndex} or {count} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	///
	///          {count} is less than zero.
	/// Throws ArgumentError:
	///          {startIndex} + {count} is greater than {length}.
	public slice(startIndex, count)
		__extern("aves_List_slice2", locals=1);

	/// Summary: Creates a new list with items from this list, starting at the specified start
	///          index up to the specified end index.
	/// Param startIndex: The index at which to start reading items, inclusive. (Int, UInt or
	///          Real)
	/// Param endIndex: The end index of the slice, exclusive. (Int, UInt or Real)
	/// Returns: A new List containing the items from this list between {startIndex} and
	///          {endIndex}.
	/// Throws TypeConversionError:
	///          {startIndex} or {endIndex} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	///
	///          {endIndex} is less than zero or greater than {length}.
	/// Remarks: Because {endIndex} is exclusive, if {startIndex} = {endIndex}, the returned list
	///          will be empty. To get all values up to the end, pass the {length} of the list
	///          into {end}, or call {slice} with one argument.
	public sliceTo(startIndex, endIndex)
		__extern("aves_List_sliceTo", locals=1);

	/// Summary: Reverses the order of the items in this list in-place.
	/// Returns: The current list.
	public reverse()
		__extern("aves_List_reverse");

	overridable override any()
	{
		var i = 0;
		while i < length {
			if this[i] {
				return true;
			}
			i += 1;
		}

		return false;
	}
	overridable override any(predicate)
	{
		if predicate is null {
			throw new ArgumentNullError("predicate");
		}

		var startVersion = version;

		var i = 0;
		while i < length {
			if startVersion != version {
				throw new InvalidStateError(listHasChanged);
			}
			if predicate(this[i]) {
				return true;
			}
			i += 1;
		}

		return false;
	}

	overridable override all()
	{
		var i = 0;
		while i < length {
			if not this[i] {
				return false;
			}
			i += 1;
		}

		return true;
	}
	overridable override all(predicate)
	{
		if predicate is null {
			throw new ArgumentNullError("predicate");
		}

		var startVersion = version;

		var i = 0;
		while i < length {
			if startVersion != version {
				throw new InvalidStateError(listHasChanged);
			}
			if not predicate(this[i]) {
				return false;
			}
			i += 1;
		}

		return true;
	}

	overridable override each(func)
	{
		if func is null {
			throw new ArgumentNullError("func");
		}

		var startVersion = version;

		var i = 0;
		while i < length {
			if startVersion != version {
				throw new InvalidStateError(listHasChanged);
			}
			func(this[i]);
			i += 1;
		}

		return this;
	}

	overridable override first()
	{
		if isEmpty {
			throw new InvalidStateError("The list is empty.");
		}

		return this[0];
	}

	overridable override first(predicate)
	{
		if predicate is null {
			throw new ArgumentNullError("predicate");
		}

		var startVersion = version;

		var i = 0;
		while i < length {
			if startVersion != version {
				throw new InvalidStateError(listHasChanged);
			}
			var item = this[i];
			if predicate(item) {
				return item;
			}
			i += 1;
		}

		throw new InvalidStateError("No matching item found.");
	}

	overridable override firstOrNull()
	{
		if isEmpty {
			return null;
		}

		return this[0];
	}

	overridable override firstOrDefault(default)
	{
		if isEmpty {
			return default;
		}

		return this[0];
	}

	overridable override fold(func)
	{
		if func is null {
			throw new ArgumentNullError("func");
		}
		if length == 0 {
			throw new InvalidStateError("Cannot fold an empty list without initial value.");
		}

		return foldInternal(this[0], func, 1);
	}
	overridable override fold(init, func)
	{
		if func is null {
			throw new ArgumentNullError("func");
		}

		return foldInternal(init, func, 0);
	}
	private foldInternal(init, func, startIndex)
	{
		var startVersion = version;

		var i = startIndex;
		while i < length {
			if startVersion != version {
				throw new InvalidStateError(listHasChanged);
			}
			init = func(init, this[i]);
			i += 1;
		}

		return init;
	}

	public foldr(func)
	{
		if length == 0 {
			throw new InvalidStateError("Cannot fold an empty list without initial value.");
		}

		return foldrInternal(this[length - 1], func, length - 2);
	}
	public foldr(init, func)
	{
		return foldrInternal(init, func, length - 1);
	}
	private foldrInternal(init, func, startIndex)
	{
		var startVersion = version;

		while startIndex >= 0 {
			if startVersion != version {
				throw new InvalidStateError(listHasChanged);
			}
			init = func(init, this[startIndex]);
			startIndex -= 1;
		}

		return init;
	}

	/// Summary: Returns the index of the first item that matches the specified predicate.
	/// Param predicate: An invokable value that takes one argument (the current element) and
	///          returns a truthy value if the element matches the predicate, or a falsy value
	///          otherwise.
	/// Returns: The index of the first item that matches {predicate}, or null if there was no
	///          match.
	/// Throws ArgumentNullError:
	///          {predicate} is null.
	public indexOfFirst(predicate)
	{
		if predicate is null {
			throw new ArgumentNullError("predicate");
		}

		var startVersion = version;

		var i = 0;
		while i < length {
			if startVersion != version {
				throw new InvalidStateError(listHasChanged);
			}
			if predicate(this[i]) {
				return i;
			}
			i += 1;
		}

		return null;
	}

	/// Summary: Returns the index of the last item that matches the specified predicate.
	/// Param predicate: An invokable value that takes one argument (the current element) and
	///          returns a truthy value if the element matches the predicate, or a falsy value
	///          otherwise.
	/// Returns: The index of the last item that matches {predicate}, or null if there was no
	///          match.
	/// Throws ArgumentNullError:
	///          {predicate} is null.
	public indexOfLast(predicate)
	{
		if predicate is null {
			throw new ArgumentNullError("predicate");
		}

		var startVersion = version;

		var i = length - 1;
		while i >= 0 {
			if startVersion != version {
				throw new InvalidStateError(listHasChanged);
			}
			if predicate(this[i]) {
				return i;
			}
			i -= 1;
		}

		return null;
	}

	overridable override last()
	{
		if isEmpty {
			throw new InvalidStateError("The list is empty.");
		}

		return this[length - 1];
	}

	overridable override last(predicate)
	{
		var startVersion = version;

		var i = length - 1;
		while i >= 0 {
			if startVersion != version {
				throw new InvalidStateError(listHasChanged);
			}
			var item = this[i];
			if predicate(item) {
				return item;
			}
			i -= 1;
		}

		throw new InvalidStateError("No matching item found.");
	}

	overridable override lastOrNull()
	{
		if isEmpty {
			return null;
		}

		return this[length - 1];
	}

	overridable override lastOrDefault(default)
	{
		if isEmpty {
			return default;
		}

		return this[length - 1];
	}

	/// Summary: Returns a new {ReadOnlyIterable} wrapper for the list.
	/// Returns: A new {ReadOnlyIterable} that wraps around the current list.
	public toReadOnly()
	{
		return new ReadOnlyIterable(this);
	}

	protected const listHasChanged = "The list has changed since the iteration started.";

	overridable override getHashCode()
	{
		return base.getHashCode();
	}

	overridable override toString()
	{
		return "List[length = {0}]".format([length]);
	}

	iter
	{
		return new ListIterator(this);
	}

	private static defaultComparer = @<=>;
}

internal class ListIterator is Iterator
{
	public new(this.list)
	{
		version = getVersion(list);
	}

	private list;
	private version;
	private i = 0;
	private cur = null;

	override get current => cur;

	override moveNext()
	{
		if getVersion(list) != version {
			throw new Error("The list has changed since the iteration started.");
		}

		if i < list.length {
			cur = list[i];
			i += 1;
			return true;
		}

		return false;
	}

	// Note: this binds to the same native method as List.version's getter.
	// This works perfectly fine because this is a static method, so the first
	// argument on the stack is a List.
	private static getVersion(list)
		__extern("aves_List_get_version");
}
