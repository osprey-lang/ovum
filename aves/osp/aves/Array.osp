namespace aves;

/// Summary: Implements a mutable, fixed-size, numerically indexed collection.
///
///          An array can hold values of any type. Unlike many collection types,
///          all arrays have a fixed size, which cannot change once the array has
///          been created. The items of an array are accessed by numeric index,
///          starting at 0, much like a {List}. The initial value of each item in
///          an array is null. Hence, a newly constructed array is full of nulls.
///
///          This class is suitable for use as an internal backing store in other
///          collection types. For a resizable, general-purpose and more flexible
///          collection type that is numerically indexed, see {List}.
///
///          The array is one of the fundamental collection types, alongside {List},
///          {Hash} and {Set}.
public class Array is Collection
{
	__init_type("aves_Array_init");

	/// Summary: Creates a new array of the specified length.
	/// Param length: The length of the array. (Int, UInt or Real)
	/// Throws TypeError:
	///          {length} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {length} is less than zero, or greater than the maximum length
	///          (which is platform-dependent).
	public new(length)
		__extern("aves_Array_new");

	/// Summary: Gets the item at the specified index.
	/// Param index: The index of the item to read. (Int, UInt or Real)
	/// Returns: The item at index {index}.
	/// Throws TypeError:
	///          {index} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {index} is less than zero or greater than or equal to {length}.
	/// Remarks: The initial value of an array element is null. Therefore, if the
	///          index has never been assigned to in this array, the return value
	///          is null.
	public get this[index]
		__extern("aves_Array_get_item");

	/// Summary: Sets the item at the specified index. The previous value is overwritten.
	/// Param index: The index at which to write the value. (Int, UInt or Real)
	/// Throws TypeError:
	///          {index} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {index} is less than zero or greater than or equal to {length}.
	public set this[index]
		__extern("aves_Array_set_item");

	/// Summary: Gets the length of the array.
	/// Returns: The length of the array, as an Int.
	override get length
		__extern("aves_Array_get_length");

	/// Summary: Determines whether the array contains the specified item.
	/// Param item: The item to look for.
	/// Returns: True if {item} is in the array; otherwise, false.
	/// Remarks: Items are compared for equality using the `==` operator.
	public contains(item)
	{
		return indexOf(item) is not null;
	}

	/// Summary: Returns the index of the first occurrence of the specified
	///          item within the array.
	/// Param item: The item to look for.
	/// Returns: The index of the first occurrence of {item} within the array,
	///          as an Int, or null if it could not be found.
	/// Remarks: Items are compared for equality using the `==` operator.
	public indexOf(item)
	{
		for i in [0 to length - 1]:
			if item == this[i]:
				return i;

		return null;
	}

	/// Summary: Fills the array with the specified value. The existing values in
	///          the array are overwritten.
	/// Param value: The value to fill the array with.
	/// Remarks: The same object is reused for all entries in the array. Hence, if
	///          {value} is mutable, all elements in the array will be affected by
	///          changes to one of the objects.
	public fill(value)
	{
		fillInternal(value, 0, length);
	}
	/// Summary: Fills a region of the array with the specified value. The existing
	///          values in the region are overwritten.
	/// Param value:      The value to fill the array region with.
	/// Param startIndex: The index at which to start writing. (Int, UInt or Real)
	/// Param count:      The number of entries to write. (Int, UInt or Real)
	/// Throws TypeError:
	///          {startIndex} or {count} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero.
	///
	///          {count} is less than zero.
	/// Throws ArgumentError:
	///          {startIndex} + {count} greater than {length}.
	/// Remarks: The same object is reused for all entries in the array region. Hence,
	///          if {value} is mutable, all elements in the region will be affected by
	///          changes to one of the objects.
	public fill(value, startIndex, count)
	{
		startIndex = int(startIndex);
		if startIndex < 0:
			throw new ArgumentRangeError("startIndex");
		count = int(count);
		if count < 0:
			throw new ArgumentRangeError("count");
		if startIndex + count > length:
			throw new ArgumentError("startIndex + count is outside the array.");

		fillInternal(value, startIndex, count);
	}
	private fillInternal(value, startIndex, count)
		__extern("aves_Array_fillInternal");

	/// Summary: Copies values from this array into a new array, from the specified
	///          index to the end of the array.
	/// Param startIndex: The index to start reading values from. (Int, UInt or Real)
	/// Returns: A new array with values copied from index {startIndex} in the current
	///          array to the end.
	/// Throws TypeError:
	///          {startIndex} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	/// Remarks: When {startIndex} equals {length}, the resulting array is empty.
	public slice(startIndex)
	{
		startIndex = int(startIndex);
		if startIndex < 0 or startIndex > length:
			throw new ArgumentRangeError("startIndex");

		return sliceInternal(startIndex, length - startIndex);
	}
	/// Summary: Copies the specified number of values from this array into a new
	///          array, starting at the specified index.
	/// Param startIndex: The index to start reading values from. (Int, UInt or Real)
	/// Param count:      The number of values to copy. (Int, UInt or Real)
	/// Returns: A new array with {count} values copied from this array, starting
	///          at index {startIndex}.
	/// Throws TypeError:
	///          {startIndex} or {count} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	///
	///          {count} is less than zero.
	/// Throws ArgumentError:
	///          {startIndex} + {count} is greater than {length}.
	public slice(startIndex, count)
	{
		startIndex = int(startIndex);
		if startIndex < 0:
			throw new ArgumentRangeError("startIndex");
		count = int(count);
		if count < 0:
			throw new ArgumentRangeError("count");
		if startIndex + count > length:
			throw new ArgumentError("startIndex + count is outside the array");

		return sliceInternal(startIndex, count);
	}

	/// Summary: Copies values from this array into a new array, from the specified
	///          start index to the specified end index.
	/// Param startIndex: The index to start reading values from. (Int, UInt or Real)
	/// Param endIndex:   The exclusive end index. (Int, UInt or Real)
	/// Returns: A new array with values copied from this array at index {startIndex}
	///          up to, but not including, {endIndex}.
	/// Throws TypeError:
	///          {startIndex} or {endIndex} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	///
	///          {endIndex} is less than zero or greater than {length}.
	///
	///          {endIndex} is less than {startIndex}.
	public sliceTo(startIndex, endIndex)
	{
		startIndex = int(startIndex);
		if startIndex < 0 or startIndex > length:
			throw new ArgumentRangeError("startIndex");
		endIndex = int(endIndex);
		if endIndex < 0 or endIndex > length:
			throw new ArgumentRangeError("endIndex");
		if endIndex < startIndex:
			throw new ArgumentRangeError("endIndex is less than startIndex", "endIndex");

		return sliceInternal(startIndex, endIndex - startIndex);
	}

	private sliceInternal(startIndex, count)
	{
		var slice = new Array(count);
		copyInternal(this, startIndex, slice, 0, count);
		return slice;
	}

	/// Summary: Resizes the specified array to a new size. The old contents are
	///          preserved, and will be clipped if the new size is smaller than
	///          the old size.
	/// Param array: (ref) An array that is updated to an array of the new size.
	///              This parameter can also be null, in which case a new array
	///              without contents is assigned to it.
	/// Param newLength: The new length of {array}. (Int, UInt or Real)
	/// Throws TypeError:
	///          {newLength} could not be converted to an Int.
	/// Throws ArgumentError:
	///          {array} is not null and is not an instance of {Array}.
	/// Throws ArgumentRangeError:
	///          {newLength} is less than zero, or greater than the maximum length
	///          (which is platform-dependent).
	/// Remarks: The {array} argument is allowed to be null, which means the method
	///          effectively allows you to initialize as well as resize an array.
	///          The {array} argument is passed by reference, and will be overwritten
	///          by a new {Array} instance. The values from the old array are copied
	///          to the new array. However, if the new length is smaller than the old
	///          array, the excess data will be cut off.
	public static resize(ref array, newLength)
	{
		if array is not Array and array is not null:
			throw new ArgumentError("array must an aves.Array or null", "array");
		newLength = int(newLength);
		if newLength < 0:
			throw new ArgumentRangeError("newLength");

		if array is null or newLength != array.length
		{
			var newArray = new Array(newLength);
			if array is not null:
				copyInternal(array, 0, newArray, 0, math.min(array.length, newLength));
			array = newArray;
		}
	}

	/// Summary: Copies the contents of one array to another. The destination
	///          array can be larger than the souce array; in that case, only
	///          `source.length` items are copied.
	/// Param source:      The source array.
	/// Param destination: The destination array.
	/// Throws ArgumentError:
	///          {source} or {destination} is not an {Array}.
	///
	///          {source} is larger than {destination}.
	/// Remarks: It is safe to copy part of one array to another part of the same array,
	///          even if the source and destination regions overlap. The values are
	///          copied as if an intermediate buffer had been used. However, since this
	///          method copies the entire array contents, if {source} and {destination}
	///          refer to the same array, the result is a possibly expensive way of
	///          doing nothing.
	public static copy(source, destination)
	{
		if source is not Array:
			throw new ArgumentError("source must be an aves.Array", "source");
		if destination is not Array:
			throw new ArgumentError("destination must be an aves.Array", "destination");
		if destination.length < source.length:
			throw new ArgumentError("The destination array is too small for the source array.");

		copyInternal(source, 0, destination, 0, source.length);
	}
	/// Summary: Copies the specified number of items from one array to another.
	///          Values are read and written starting at index 0.
	/// Param source:      The source array.
	/// Param destination: The destination array.
	/// Param count:       The number of items to copy. (Int, UInt or Real)
	/// Throws TypeError:
	///          {count} could not be converted to an Int.
	/// Throws ArgumentError:
	///          {source} or {destination} is not an {Array}.
	/// Throws ArgumentRangeError:
	///          {count} is less than zero, or {count} is greater than the length of
	///          either the destination or the source array.
	/// Remarks: It is safe to copy part of one array to another part of the same array,
	///          even if the source and destination regions overlap. The values are
	///          copied as if an intermediate buffer had been used.
	public static copy(source, destination, count)
	{
		if source is not Array:
			throw new ArgumentError("source must be an aves.Array", "source");
		if destination is not Array:
			throw new ArgumentError("destination must be an aves.Array", "destination");
		count = int(count);
		if count < 0 or count > destination.length or count > source.length:
			throw new ArgumentRangeError("count");

		copyInternal(source, 0, destination, 0, count);
	}
	/// Summary: Copies the specified number of items from one array to another,
	///          starting at the specified indices within each array.
	/// Param source:      The source array.
	/// Param sourceIndex: The index at which to start reading values from {source}.
	///                    (Int, UInt or Real)
	/// Param dest:        The destination array.
	/// Param destIndex:   The index at which to start writing values into {dest}.
	///                    (Int, UInt or Real)
	/// Param count:       The number of items to copy. (Int, UInt or Real)
	/// Throws TypeError:
	///          {sourceIndex}, {destIndex} or {count} could not be converted to an Int.
	/// Throws ArgumentError:
	///          {source} or {destination} is not an {Array}.
	///
	///          {sourceIndex} + {count} is greater than the length of {source}.
	///
	///          {destIndex} + {count} is greater than the length of {dest}.
	/// Throws ArgumentRangeError:
	///          {startIndex}, {destIndex} or {count} is less than zero.
	/// Remarks: It is safe to copy part of one array to another part of the same array,
	///          even if the source and destination regions overlap. The values are
	///          copied as if an intermediate buffer had been used.
	public static copy(source, sourceIndex, dest, destIndex, count)
	{
		if source is not Array:
			throw new ArgumentError("source must be an aves.Array", "source");
		sourceIndex = int(sourceIndex);
		if dest is not Array:
			throw new ArgumentError("dest must be an aves.Array", "dest");
		destIndex = int(destIndex);
		if sourceIndex < 0 or destIndex < 0:
			throw new ArgumentRangeError(sourceIndex < 0 ? "sourceIndex" : "destIndex");
		count = int(count);
		if count < 0:
			throw new ArgumentRangeError("count");
		if sourceIndex + count > source.length:
			throw new ArgumentError("sourceIndex + count is outside of the source array.");
		if destIndex + count > dest.length:
			throw new ArgumentError("destIndex + count is outside of the destination array.");

		copyInternal(source, sourceIndex, dest, destIndex, count);
	}
	private static copyInternal(source, sourceIndex, dest, destIndex, count)
		__extern("aves_Array_copyInternal");

	iter
	{
		return new ArrayIterator(this);
	}
}

private class ArrayIterator is Iterator
{
	public new(this.array);

	private array;
	private cur;
	private index = 0;

	override get current = cur;

	override moveNext()
	{
		if index < array.length
		{
			cur = array[index];
			index += 1;
			return true;
		}

		return false;
	}
}
