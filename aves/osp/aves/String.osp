namespace aves;

/// Summary: Returns a string representing the specified value.
/// Param value: The value to get a string representation of.
/// Returns: If {value} is null, this function returns the empty string; otherwise, the
///          return value is the result of calling `toString` on {value} with no arguments.
/// Throws TypeConversionError:
///          The `toString` method of {value} did not return a String.
public function string(value)
{
	if value is null:
		return "";
	if value is not String
	{
		value = value.toString();
		if value is not String:
			throw new TypeConversionError("String conversion failed: toString() did not return a string.");
	}
	return value;
}

/// Summary: Represents an ordered sequence of UTF-16 code units, commonly
///          used for encoding text.
/// Remarks: Osprey strings are all encoded using UTF-16 internally. As a result,
///          “characters” in a String do not correspond directly to Unicode code
///          points, as the string may contain surrogate pairs.
///
///          Additional information about UTF-16 and surrogate pairs can be found
///          on the Unicode Consortium website. A good starting point is the FAQ
///          page on UTF-8 and UTF-16: http://www.unicode.org/faq/utf_bom.html
///
///          In the documentation of string members, the terms “code unit” and
///          “character” are used interchangeably, except when used in the phrase
///          “Unicode character”.
public class String is Collection
{
	private new();

	/// Summary: Gets the UTF-16 code unit at the specified index, as a Char.
	/// Param index: The index of a character within the string.
	/// Throws ArgumentRangeError:
	///          {index} is less than zero or greater than or equal to {length}.
	/// Remarks: If the index refers to the first code unit of a surrogate pair, then the
	///          resulting char will only contain that one code unit, not the surrogate pair.
	///          Use {getCharacter} to obtain the value represented by the surrogate pair.
	public get this[index]
		__extern("aves_String_get_item");

	/// Summary: Gets the length of the string, in number of UTF-16 code units, as an Int.
	override get length
		__extern("aves_String_get_length");

	/// Summary: Gets a value indicating whether the string is empty (its length is 0).
	public get isEmpty => length == 0;

	/// Summary: Gets a value indicating whether the string instance is
	//           in the intern table.
	public get isInterned
		__extern("aves_String_get_isInterned");

	/// Summary: Determines whether this string equals another value.
	/// Param value: The value to compare against.
	/// Returns: If {value} is not a string, the return value is false.
	///          Otherwise, the method returns true if {value} is the
	///          same sequence of characters as this string.
	///
	///          This comparison is case-sensitive.
	public equals(value)
		__extern("aves_String_opEquals");

	/// Summary: Determines whether this string equals another value, by
	///          performing a case-insensitive comparison.
	/// Param value: The value to compare against.
	/// Returns: If {value} is not a string, the return value is false.
	///          Otherwise, the method returns true if {value} is the
	///          same sequence of characters as this string, irrespective
	///          of character casing.
	///
	/// Remarks: The case folding performed by this method is locale-
	///          independent, and uses a one-to-one mapping, which means
	///          (among other things) that “ß” is not equal to “SS”, and
	///          “I” is equal to both “i” and “ı”.
	///
	///          This method does not normalize composite characters.
	///          Hence, “a” followed by a combining acute accent (U+0301)
	///          is equal to neither “á” (U+00E1) nor “Á” (U+00C1).
	public equalsIgnoreCase(value)
		__extern("aves_String_equalsIgnoreCase");

	/// Summary: Determines whether the given string occurs as a substring
	///          within this string. The comparison is case-sensitive.
	/// Param value: The substring to look for in this string. (String, Char)
	/// Returns: True if this string contains {value} as a substring; otherwise,
	///          false.
	/// Throws ArgumentTypeError:
	///          {value} is not a String or Char.
	public contains(value)
		__extern("aves_String_contains");

	/// Summary: Determines whether the current string starts with the specified
	///          string. The comparison is case-sensitive.
	/// Param value: The value to test against.
	/// Returns: True if this string starts with {value}; otherwise, false.
	/// Throws ArgumentTypeError:
	///          {value} is not a String or Char.
	public startsWith(value)
		__extern("aves_String_startsWith");

	/// Summary: Determines whether the current string ends with the specified
	///          string. The comparison is case-sensitive.
	/// Param value: The value to test against.
	/// Returns: True if this string starts with {value}; otherwise, false.
	/// Throws ArgumentTypeError:
	///          {value} is not a String or Char.
	public endsWith(value)
		__extern("aves_String_endsWith");

	/// Summary: Searches the string for the specified value.
	/// Param value: The string to search for.
	/// Returns: The index of the first occurrence of {value} within this string, as an Int, or
	///          null if this string doesn’t contain {value}.
	/// Throws TypeConversionError:
	///          {value} could not be converted to a String.
	public indexOf(value)
	{
		value = string(value);
		return indexOfInternal(value, 0, length);
	}
	/// Summary: Searches the string for the specified value. The search starts at the specified
	///          index.
	/// Param value: The string to search for.
	/// Param startIndex: The index to start the search at. (Int, UInt or Real)
	/// Returns: The index of the first occurrence of {value} within the string, as an Int, or
	///          null if it this string doesn’t contain {value}. If found, the return value is
	///          greater than or equal to {startIndex}.
	/// Throws TypeConversionError:
	///          {value} could not be converted to a String.
	///
	///          {startIndex} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	public indexOf(value, startIndex)
	{
		value = string(value);
		startIndex = int(startIndex);
		if startIndex < 0 or startIndex > length:
			throw new ArgumentRangeError("startIndex");

		return indexOfInternal(value, startIndex, length - startIndex);
	}
	/// Summary: Searches the string for the specified value. The search spans over the specified
	///          region of the string.
	/// Param value: The string to search for.
	/// Param startIndex: The index to start the search at. (Int, UInt or Real)
	/// Param count: The total number of characters from this string to test against.
	///              (Int, UInt or Real)
	/// Returns: The index of the first occurrence of {value} within the specified region of the
	///          string, as an Int, or null if the region doesn’t contain {value}. If found, the
	///          return value is greater than or equal to {startIndex}.
	/// Throws TypeConversionError:
	///          {value} could not be converted to a string.
	///
	///          {startIndex} or {count} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	///
	///          {count} is less than zero.
	/// Throws ArgumentError:
	///          {startIndex} + {count} is greater than {length}.
	public indexOf(value, startIndex, count)
	{
		value = string(value);
		startIndex = int(startIndex);
		if startIndex < 0 or startIndex > length:
			throw new ArgumentRangeError("startIndex");
		count = int(count);
		if count < 0:
			throw new ArgumentRangeError("count");
		if startIndex + count > length:
			throw new ArgumentRangeError("startIndex + count is outside the string.");

		return indexOfInternal(value, startIndex, count);
	}

	private indexOfInternal(value, startIndex, count)
		__extern("aves_String_indexOfInternal");

	/// Summary: Returns the index of the last occurrence of the specified
	///          substring within the current string.
	/// Param value: The substring to search for.
	/// Returns: The index of the last occurrence of the given substring within
	///          this string, as an Int, or null if this string doesn’t contain
	///          the substring.
	/// Throws ArgumentTypeError:
	///          {value} is not a String or Char.
	public lastIndexOf(value)
		__extern("aves_String_lastIndexOf");

	/// Summary: Concatenates the specified value onto the beginning of this string.
	/// Param value: The value to prepend to this string.
	/// Returns: A new string containing {value} followed by the current string.
	///          If {value} is null, it is treated as the empty string.
	/// Remarks: This method returns a new string instance. The original string is
	///          not modified in any way.
	public prepend(value)
	{
		if value is null:
			return this;
		return string(value) :: this;
	}

	/// Summary: Concatenates the specified value onto the end of this string.
	/// Param value: The value to append to this string.
	/// Returns: A new string containing the current string followed by {value}.
	///          If {value} is null, it is treated as the empty string.
	/// Remarks: This method returns a new string instance. The original string is
	///          not modified in any way.
	public append(value)
	{
		if value is null:
			return this;
		return this :: string(value);
	}

	/// Summary: Surrounds the string with the specified value.
	/// Param value: The value to surround this string with. This single value is
	///              concatenated onto both the beginning and the end.
	/// Returns: A new string containing {value} followed by the current string
	///          followed by {value}. If {value} is null, it is treated as the
	///          empty string.
	/// Remarks: This method returns a new string instance. The original string is
	///          not modified in any way.
	public surroundWith(value)
	{
		return surroundWith(value, value);
	}
	/// Summary: Surrounds the string with the specified values.
	/// Param prefix: The value to concatenate onto the beginning of this string.
	/// Param suffix: The value to concatenate onto the end of this string.
	/// Returns: A new string containing {prefix} followed by the current string
	///          followed by {suffix}. If {prefix} or {suffix} is null, it is
	///          treated as the empty string.
	/// Remarks: This method returns a new string instance. The original string is
	///          not modified in any way.
	public surroundWith(prefix, suffix)
	{
		if prefix is null and suffix is null:
			return this;
		prefix = string(prefix);
		suffix = string(suffix);
		return prefix :: this :: suffix;
	}

	/// Summary: Returns a new string containing the characters of this string
	///          in reverse order.
	/// Remarks: This method works with Unicode characters, not UTF-16 code
	///          units. Surrogate pairs will be treated as a single unit.
	public reverse()
		__extern("aves_String_reverse", locals=1);

	/// Summary: Returns a substring of this string starting at the specified index.
	/// Param startIndex: The index at which to start reading characters. (Int, UInt or Real)
	/// Returns: A new String instance containing characters from this string, from
	///          index {startIndex} to the end of this string.
	/// Throws TypeConversionError:
	///          {startIndex} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	public substring(startIndex)
	{
		startIndex = int(startIndex);
		if startIndex < 0 or startIndex > length:
			throw new ArgumentRangeError("startIndex");

		return substringInternal(startIndex, length - startIndex);
	}
	/// Summary: Returns a substring of of the specified length, starting at the
	///          specified index in this string.
	/// Param startIndex: The index at which to start reading characters. (Int, UInt or Real)
	/// Param count: The total number of characters to extract. (Int, UInt or Real)
	/// Returns: A new String instance containing {count} characters extracted from
	///          this string, starting at index {startIndex}.
	/// Throws TypeConversionError:
	///          {startIndex} or {count} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	///
	///          {count} is less than zero.
	/// Throws ArgumentError:
	///          {startIndex} + {count} is greater than {length}.
	public substring(startIndex, count)
	{
		startIndex = int(startIndex);
		if startIndex < 0 or startIndex > length:
			throw new ArgumentRangeError("startIndex");
		count = int(count);
		if count < 0:
			throw new ArgumentRangeError("count");
		if startIndex + count > length:
			throw new ArgumentError("startIndex + count is outside the string.");

		return substringInternal(startIndex, count);
	}

	/// Summary: Returns a substring of this string, from the specified start index
	///          to the specified end index.
	/// Param startIndex: The index at which to start reading characters. (Int, UInt or Real)
	/// Param endIndex: The index of the last character to read, exclusive. (Int, UInt or Real)
	/// Returns: A new String instance containing characters from this string within
	///          the range specified by {startIndex} and {endIndex}.
	/// Throws TypeConversionError:
	///          {startIndex} or {endIndex} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	///
	///          {endIndex} is less than zero or greater than {length}.
	///
	///          {endIndex} is less than {startIndex}.
	public substringTo(startIndex, endIndex)
	{
		startIndex = int(startIndex);
		if startIndex < 0 or startIndex > length:
			throw new ArgumentRangeError("startIndex");
		endIndex = int(endIndex);
		if endIndex < 0 or endIndex > length:
			throw new ArgumentRangeError("endIndex");
		if endIndex < startIndex:
			throw new ArgumentRangeError("endIndex");

		return substringInternal(startIndex, endIndex - startIndex);
	}

	private substringInternal(startIndex, count)
		__extern("aves_String_substringInternal");

	/// Summary: Formats this string using the specified values.
	/// Param values: A List or Hash containing values to replace format placeholders with.
	/// Returns: A new String with the format placeholders replaced by values from {values}.
	///          See the remarks section for more details about the format placeholders.
	/// Throws ArgumentTypeError:
	///          {values} is not a List or a Hash.
	/// Throws TypeConversionError:
	///          A placeholder value could not be converted to a String.
	/// Throws ArgumentRangeError:
	///          {values} is a List and a placeholder value is not a valid index in that list.
	/// Throws ArgumentError:
	///          {values} is a Hash and a placeholder value does not refer to a key in that hash.
	/// Throws InvalidFormatError:
	///          The string contains a malformed placeholder.
	/// Throws OverflowError:
	///          Converting a placeholder or alignment value to an Int resulted in an overflow.
	/// Remarks: The format placeholders must be in the general format `{ph}`, where `ph` is
	///          the “name” of the placeholder. If you pass a List into {values}, `ph` must
	///          correspond to an index in that list, consisting of the digits 0 to 9 (negative
	///          numbers are not allowed). If {values} is a Hash, then `ph` must be a key in
	///          that Hash; additionally, `ph` must be a valid Osprey identifier or keyword
	///          (e.g. `{feathers?}` is not a valid placeholder).
	///
	///          The placeholder value is converted to a string following the same rules as
	///          the function `aves.string`: if the placeholder value is null, an empty string
	///          is inserted; otherwise, if the value is not a String, `.toString()` is called
	///          on it with no arguments. If that call does not return a String, this method
	///          throws a TypeConversionError.
	///
	///          Additionally, you can align placeholder values to specific widths:
	///              `{ph>n}` aligns the value `n` characters to the right;
	///              `{ph<n}` aligns the value `n` characters to the left; and
	///              `{ph=n}` centers the value in a space `n` characters wide.
	///          `n` must be a decimal integer, and the value is always padded with spaces.
	///
	///          Examples:
	///
	///          ```
	///          "[{0>6}]".format(["y"])   // => "[     y]"
	///          "[{0<6}]".format(["abc"]) // => "[abc   ]"
	///          "[{0=6}]".format(["hi"])  // => "[  hi  ]"
	///          "Name: {name}, age: {age}".format({
	///            "name": null,
	///            "age": Real.NaN
	///          }) // => "Name: , age: NaN"
	///          ```
	public format(values)
		__extern("aves_String_format", locals=1);

	/// Summary: Inserts a value at the specified index in the string.
	/// Param index: The index at which to insert the value. (Int, UInt or Real)
	/// Returns: A new String instance containing characters from the current string,
	///          with {value} inserted at the specified index.
	/// Throws TypeConversionError:
	///          {index} could not be converted to an Int.
	///
	///          {value} could not be converted to a string.
	/// Throws ArgumentRangeError:
	///          {index} is less than zero or greater than {length}.
	/// Remarks: This method returns a new string instance. The original string is
	///          not modified in any way.
	public insert(index, value)
	{
		index = int(index);
		if index < 0 or index > length:
			throw new ArgumentRangeError("index");
		value = string(value);

		return splice(index, 0, value);
	}

	/// Summary: Removes part of this string, from the specified index to the end.
	/// Param startIndex: The index of the first character to remove. (Int, UInt or Real)
	/// Returns: A new String instance with characters from the current string
	///          up to {startIndex}.
	/// Throws TypeConversionError:
	///          {startIndex} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	/// Remarks: This method returns a new string instance. The original string is
	///          not modified in any way.
	public remove(startIndex)
	{
		startIndex = int(startIndex);
		if startIndex < 0 or startIndex > length:
			throw new ArgumentRangeError("startIndex");

		return splice(startIndex, length - startIndex, "");
	}
	/// Summary: Removes the specified number of characters from this string, starting
	///          at the specified index.
	/// Param startIndex: The index of the first character to remove. (Int, UInt or Real)
	/// Param count: The total number of characters to remove. (Int, UInt or Real)
	/// Returns: A new String instance with characters from the current string excluding
	///          the substring defined by {startIndex} and {count}.
	/// Throws TypeConversionError:
	///          {startIndex} or {count} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	///
	///          {count} is less than zero.
	/// Throws ArgumentError:
	///          {startIndex} + {count} is greater than {length}.
	/// Remarks: This method returns a new string instance. The original string is
	///          not modified in any way.
	public remove(startIndex, count)
	{
		startIndex = int(startIndex);
		if startIndex < 0 or startIndex > length:
			throw new ArgumentRangeError("startIndex");
		count = int(count);
		if count < 0:
			throw new ArgumentRangeError("count");
		if startIndex + count > length:
			throw new ArgumentError("startIndex + count is outside the string.");

		return splice(startIndex, count, "");
	}

	/// Summary: Repeats the string the specified number of times.
	/// Param times: The number of times to repeat this string.
	/// Returns: A new String instance containing the current string repeated {times}
	///          times.
	/// Throws TypeConversionError:
	///          {times} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {times} is less than zero.
	///
	///          The resulting string length is too large.
	public repeat(times)
		__extern("aves_String_repeat");

	/// Summary: Returns a new string with all occurrences of {oldValue} replaced
	///          with {newValue}
	/// Param oldValue: The string to be replaced.
	/// Param newValue: The string to replace {oldValue}.
	/// Returns: A new String instance with all occurrences of {oldValue} replaced
	///          with {newValue}.
	/// Throws ArgumentNullError:
	///          {oldValue} is null.
	/// Throws TypeConversionError:
	///          {oldValue} or {newValue} could not be converted to a string.
	/// Throws ArgumentError:
	///          {oldValue} is of length 0.
	public replace(oldValue, newValue)
	{
		if oldValue is null:
			throw new ArgumentNullError("oldValue");
		oldValue = string(oldValue);
		newValue = string(newValue);
		return replaceInner(oldValue, newValue, -1);
	}
	/// Summary: Returns a new string with occurrences of {oldValue} replaced
	///          with {newValue} a maximum of {maxTimes} times.
	/// Param oldValue: The string to be replaced.
	/// Param newValue: The string to replace {oldValue}.
	/// Param maxTimes: The maximum number of substitutions to make. If less
	///          than zero, all occurrences of {oldValue} are replaced. If
	///          zero, the string is unaltered. (Int, UInt or Real)
	/// Returns: A new String instance with occurrences of {oldValue} replaced
	///          with {newValue}, a maxiumim of {maxTimes} times, or with all
	///          occurrences replaced if {maxTimes} is negative.
	/// Throws ArgumentNullError:
	///          {oldValue} is null.
	/// Throws TypeConversionError:
	///          {oldValue} or {newValue} could not be converted to a string.
	///
	///          {maxTimes} could not be converted to an Int.
	/// Throws ArgumentError:
	///          {oldValue} is of length 0.
	public replace(oldValue, newValue, maxTimes)
	{
		if oldValue is null:
			throw new ArgumentNullError("oldValue");
		oldValue = string(oldValue);
		newValue = string(newValue);
		maxTimes = int(maxTimes);
		return replaceInner(oldValue, newValue, maxTimes);
	}
	private replaceInner(oldValue, newValue, maxTimes)
		__extern("aves_String_replaceInner");

	/// Summary: Replaces part of this string with another value.
	/// Param startIndex: The index of the first character to replace. (Int, UInt or Real)
	/// Param count: The total number of characters to replace. (Int, UInt or Real)
	/// Returns: A new string instance with the specified substring replaced with
	///          {value}.
	/// Throws TypeConversionError:
	///          {startIndex} or {count} could not be converted to an Int.
	///
	///          {newValue} could not be converted to a string.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	///
	///          {count} is less than zero.
	/// Throws ArgumentError:
	///          {startIndex} + {count} is greater than {length}.
	/// Remarks: This method returns a new string instance. The original string is
	///          not modified in any way.
	public replaceSubstring(startIndex, count, newValue)
	{
		startIndex = int(startIndex);
		if startIndex < 0 or startIndex > length:
			throw new ArgumentRangeError("startIndex");
		count = int(count);
		if count < 0:
			throw new ArgumentRangeError("count");
		if startIndex + count > length:
			throw new ArgumentError("startIndex + count is outside the string.");

		return splice(startIndex, count, newValue);
	}

	// Helper method for remove, insert and replaceSubstring. It does the same
	// as replaceSubstring, but without type or range checks.
	private splice(startIndex, removeCount, newValue)
		__extern("aves_String_splice");

	/// Summary: Splits the string into a List of substrings on the given
	///          separator.
	/// Param separator: The substring to look for within this string, and
	///          split the string on. (String)
	/// Returns: A List instance containing the substrings of this string
	///          that were delineated by {separator}.
	/// Throws TypeConversionError:
	///          {separator} could not be converted to a string.
	/// Remarks: This method does not remove empty strings from the returned
	///          list. For example:
	///
	///          ```
	///          "a,,b,c,d,,".split(",") // => ["a", "", "b", "c", "d", "", ""]
	///          ```
	///
	///          Strings are processed from low character index to high, which
	///          generally means left-to-right, and the string is split as soon
	///          as the separator is encountered as a substring. The search then
	///          continues immediately after the substring. To illustrate:
	///
	///          ```
	///          "a;;;b;;;;c".split(";;") // => ["a", ";b", "", "c"]
	///          ```
	public split(separator)
		__extern("aves_String_split", locals=1);

	/// Summary: Removes all leading and trailing white space characters from
	///          the string.
	/// Returns: A String instance containing the values of this string, minus
	///          all leading and trailing white space.
	/// Remarks: “White space” includes all the characters for which `String.isWhiteSpace`
	///          returns true. See the documentation of that method for details.
	///          The trimming stops as soon as a non-white-space character is
	///          encountered. For example, if the string is `"   123   abc  "`,
	///          the output will be `"123   abc"`.
	///
	///          Note: the value returned is a new string instance. The original
	///          string is not altered.
	public trim()
	{
		var start = getTrimStart();
		var end = getTrimEnd();
		if start > end:
			return "";
		return substring(start, end - start + 1);
	}
	/// Summary: Removes all leading and trailing occurrences of a specific set
	///          of characters.
	/// Param chars: A collection of characters to strip from the start and
	///          end of this string. This can be of any collection type that is
	///          iterable.
	/// Returns: A String instance containing the values of this string, minus
	///          all leading and trailing occurrences of characters in {chars}.
	/// Remarks: {chars} can be any collection type that implements an iterator.
	///          `trim` will construct a temporary Set, run through the iterator
	///          and add to the set any strings of length 1 found in the collection.
	///          Any leading and trailing characters of the string that occur in
	///          this set will be stripped. The trimming stops as soon as a
	///          character outside this set is encountered. For example:
	///
	///          ```
	///          "aaahelloaaa".trim("a")   // => "hello"
	///          "abacusbacba".trim("abc") // => "us"
	///          ```
	///
	///          Since String is iterable, it is also possible to pass in a string
	///          containing the characters to trim, as in the example above.
	///
	///          If {chars} contains a very large number of characters, the
	///          temporary Set may consume a large amount of memory.
	///
	///          Note: the value returned is a new string instance. The original
	///          string is not altered.
	public trim(chars)
	{
		var charSet = getTrimSet(chars);
		var start = getTrimStart(charSet);
		var end = getTrimEnd(charSet);

		if start > end:
			return "";
		return substring(start, end - start + 1);
	}

	/// Summary: Removes all leading white space characters from the string.
	/// Returns: A String instance containing the values of this string, minus
	///          any leading white space characters.
	/// Remarks: Note: the value returned is a new string instance. The original
	///          string is not altered.
	public trimStart()
	{
		var start = getTrimStart();
		if start == length:
			return "";
		return substring(start);
	}
	/// Summary: Removes all leading occurrences of a specific set of characters.
	/// Param chars: A collection of characters to strip from the start of this
	///          string. This can be of any collection type that is iterable.
	/// Returns: A String instance containing the values of this string, minus
	///          all leading occurrences of characters in {chars}.
	/// Remarks: See the remarks of `trim(chars)` for more details on the {chars}
	///          parameter and how it’s handled.
	///
	///          Note: the value returned is a new string instance. The original
	///          string is not altered.
	public trimStart(chars)
	{
		var charSet = getTrimSet(chars);
		var start = getTrimStart(charSet);

		if start == length:
			return "";
		return substring(start);
	}

	/// Summary: Removes all trailing white space characters from the string.
	/// Returns: A String instance containing the values of this string, minus
	///          all trailing white space characters.
	/// Remarks: Note: the value returned is a new string instance. The original
	///          string is not altered.
	public trimEnd()
	{
		var end = getTrimEnd();
		if end == -1:
			return "";
		return substring(0, end + 1);
	}
	/// Summary: Removes all trailing occurrences of a specific set of characters.
	/// Param chars: A collection of characters to strip from the end of this string.
	///          This can be of any collection type that is iterable.
	/// Returns: A String instance containing the values of this string, minus
	///          all trailing occurrences of characters in {chars}.
	/// Remarks: See the remarks of `trim(chars)` for more details on the {chars}
	///          parameter and how it’s handled.
	///
	///          Note: the value returned is a new string instance. The original
	///          string is not altered.
	public trimEnd(chars)
	{
		var charSet = getTrimSet(chars);
		var end = getTrimEnd(charSet);

		if end == -1:
			return "";
		return substring(0, end + 1);
	}

	private static getTrimSet(chars)
	{
		var charSet;
		if chars is String
		{
			charSet = Set.from(chars);
		}
		else
		{
			charSet = new Set();
			for ch in chars:
				if ch is Char or ch is String:
					charSet.add(ch);
		}
		return charSet;
	}

	private getTrimStart()
	{
		var start = 0;
		while start < length and isWhiteSpace(start):
			start += 1;
		return start;
	}
	private getTrimStart(charSet)
	{
		var start = 0;
		while start < length
		{
			var ch = getCharacter(start);
			if not charSet.contains(ch):
				break;
			start += ch.length;
		}
		return start;
	}

	private getTrimEnd()
	{
		var end = length - 1;
		while end >= 0 and isWhiteSpace(end):
			end -= 1;
		return end;
	}
	private getTrimEnd(charSet)
	{
		var end = length - 1;
		while end >= 0
		{
			var ch = getCharacter(end);
			if not charSet.contains(ch):
				break;
			end -= ch.length;
		}
		return end;
	}

	/// Summary: Pads the string with spaces up to a specified minimum length.
	/// Param minLength: The minimum length to pad the string to. (Int, UInt or Real)
	/// Param side: The “side” of the string that is padded ({StringPad.start},
	///             {StringPad.end} or {StringPad.both}). (StringPad)
	/// Returns: A padded version of this string, no shorter than {minLength} characters.
	///          If {minLength} is less than or equal to the string’s {length}, the same
	///          instance is returned.
	/// Throws TypeConversionError:
	///          {minLength} could not be converted to an Int.
	/// Throws ArgumentTypeError:
	///          {side} is not a {StringPad} value.
	/// Throws ArgumentRangeError:
	///          {minLength} is less than zero.
	/// Remarks: Note: This method returns a new String value. It does not modify the
	///          original string.
	public pad(minLength, side)
	{
		minLength = int(minLength);
		if minLength < 0:
			throw new ArgumentRangeError("minLength");
		if side is not StringPad:
			throw new ArgumentTypeError("side", typeof(StringPad));

		return padInner(minLength, ' ', side);
	}
	/// Summary: Pads the string with the specified character up to a specified minimum
	///          length.
	/// Param minLength: The minimum length to pad the string to. (Int, UInt or Real)
	/// Param char: The character to pad with. This must be a Char or String of length 1.
	///             (Char or String)
	/// Param side: The “side” of the string that is padded ({StringPad.start},
	///             {StringPad.end} or {StringPad.both}). (StringPad)
	/// Returns: A padded version of this string, no shorter than {minLength} characters.
	///          If {minLength} is less than or equal to the string’s {length}, the same
	///          instance is returned.
	/// Throws TypeConversionError:
	///          {minLength} could not be converted to an Int.
	/// Throws ArgumentTypeError:
	///          {char} is not a Char or String.
	///
	///          {side} is not a {StringPad} value.
	/// Throws ArgumentRangeError:
	///          {minLength} is less than zero.
	/// Throws ArgumentError:
	///          {char} is a Char or String whose `length` is not 1.
	/// Remarks: Note: This method returns a new String value. It does not modify the
	///          original string.
	public pad(minLength, char, side)
	{
		minLength = int(minLength);
		if minLength < 0:
			throw new ArgumentRangeError("minLength");
		char = getPaddingChar(char);
		if side is not StringPad:
			throw new ArgumentTypeError("side", typeof(StringPad));

		return padInner(minLength, char, side);
	}

	/// Summary: Pads the start of the string with spaces up to a specified minimum length.
	/// Param minLength: The minimum length to pad the string to. (Int, UInt or Real)
	/// Returns: A padded version of this string, no shorter than {minLength} characters.
	///          If {minLength} is less than or equal to the string’s {length}, the same
	///          instance is returned.
	/// Throws TypeConversionError:
	///          {minLength} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {minLength} is less than zero.
	/// Remarks: Note: This method returns a new String value. It does not modify the
	///          original string.
	public padStart(minLength)
	{
		minLength = int(minLength);
		if minLength < 0:
			throw new ArgumentRangeError("minLength");

		return padInner(minLength, ' ', StringPad.start);
	}
	/// Summary: Pads the start of the string with the specified character up to a specified
	///          minimum length.
	/// Param minLength: The minimum length to pad the string to. (Int, UInt or Real)
	/// Param char: The character to pad with. This must be a Char or String of length 1.
	///             (Char or String)
	/// Returns: A padded version of this string, no shorter than {minLength} characters.
	///          If {minLength} is less than or equal to the string’s {length}, the same
	///          instance is returned.
	/// Throws TypeConversionError:
	///          {minLength} could not be converted to an Int.
	/// Throws ArgumentTypeError:
	///          {char} is not a Char or String.
	/// Throws ArgumentRangeError:
	///          {minLength} is less than zero.
	/// Throws ArgumentError:
	///          {char} is a Char or String whose `length` is not 1.
	/// Remarks: Note: This method returns a new String value. It does not modify the
	///          original string.
	public padStart(minLength, char)
	{
		minLength = int(minLength);
		if minLength < 0:
			throw new ArgumentRangeError("minLength");
		char = getPaddingChar(char);

		return padInner(minLength, char, StringPad.start);
	}

	/// Summary: Pads the end of the string with spaces up to a specified minimum length.
	/// Param minLength: The minimum length to pad the string to. (Int, UInt or Real)
	/// Returns: A padded version of this string, no shorter than {minLength} characters.
	///          If {minLength} is less than or equal to the string’s {length}, the same
	///          instance is returned.
	/// Throws TypeConversionError:
	///          {minLength} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {minLength} is less than zero.
	/// Remarks: Note: This method returns a new String value. It does not modify the
	///          original string.
	public padEnd(minLength)
	{
		minLength = int(minLength);
		if minLength < 0:
			throw new ArgumentRangeError("minLength");

		return padInner(minLength, ' ', StringPad.end);
	}
	/// Summary: Pads the end of the string with the specified character up to a specified
	///          minimum length.
	/// Param minLength: The minimum length to pad the string to. (Int, UInt or Real)
	/// Param char: The character to pad with. This must be a Char or String of length 1.
	///             (Char or String)
	/// Returns: A padded version of this string, no shorter than {minLength} characters.
	///          If {minLength} is less than or equal to the string’s {length}, the same
	///          instance is returned.
	/// Throws TypeConversionError:
	///          {minLength} could not be converted to an Int.
	/// Throws ArgumentTypeError:
	///          {char} is not a Char or String.
	/// Throws ArgumentRangeError:
	///          {minLength} is less than zero.
	/// Throws ArgumentError:
	///          {char} is a Char or String whose `length` is not 1.
	/// Remarks: Note: This method returns a new String value. It does not modify the
	///          original string.
	public padEnd(minLength, char)
	{
		minLength = int(minLength);
		if minLength < 0:
			throw new ArgumentRangeError("minLength");
		char = getPaddingChar(char);

		return padInner(minLength, char, StringPad.end);
	}

	private padInner(minLength, char, side)
		__extern("aves_String_padInner");

	private static getPaddingChar(char)
	{
		if char is not String and char is not Char:
			throw new ArgumentTypeError("char", [typeof(Char), typeof(String)]);

		if char.length != 1:
			throw new ArgumentError("The padding character must be of length 1.");
		if char is String:
			// Get the first character
			char = char[0];

		return char;
	}

	public toUpper()
		__extern("aves_String_toUpper");
	public toLower()
		__extern("aves_String_toLower");

	public getCharacter(i)
		__extern("aves_String_getCharacter");
	public getCodePoint(i)
		__extern("aves_String_getCodePoint");

	public getCategory(i)
		__extern("aves_String_getCategory");
	public isSurrogatePair(i)
		__extern("aves_String_isSurrogatePair");
	public isControl(i)
	{
		return getCharacter(i).isControl;
	}
	public isDigit(i)
	{
		return getCharacter(i).isDigit;
	}
	public isLetter(i)
	{
		return getCharacter(i).isLetter;
	}
	public isLower(i)
	{
		return getCharacter(i).isLower;
	}
	public isUpper(i)
	{
		return getCharacter(i).isUpper;
	}
	public isNumber(i)
	{
		return getCharacter(i).isNumber;
	}
	public isPunct(i)
	{
		return getCharacter(i).isPunct;
	}
	public isSymbol(i)
	{
		return getCharacter(i).isSymbol;
	}
	public isAssigned(i)
	{
		return getCharacter(i).isAssigned;
	}
	public isWhiteSpace(i)
	{
		return getCharacter(i).isWhiteSpace;
	}

	/// Summary: Gets the system's reference to an interned string with the same
	///          value as this string.
	/// Returns: The system's reference to the interned string with the same value
	///          as this string, or null if the string is not interned.
	public getInterned()
		__extern("aves_String_getInterned");
	/// Summary: Interns the current string. If the intern table already contains
	///          a string with this value, that string is returned. Otherwise, the
	///          current string is added to the intern table and returned.
	/// Returns: The system's reference to the interned string with the same value
	///          as this string.
	public intern()
		__extern("aves_String_intern");

	override getHashCode()
		__extern("aves_String_getHashCode");

	/// Summary: Computes a hash code for a part of this string.
	/// Param startIndex: The first index of the substring to hash. (Int, UInt or Real)
	/// Param count: The number of characters to hash from this string. (Int, UInt or Real)
	/// Returns: An Int with a hash code for the specified substring.
	/// Throws TypeConversionError:
	///          {startIndex} or {count} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {startIndex} is less than zero or greater than {length}.
	///
	///          {count} is less than zero.
	/// Throws ArgumentError:
	///          {startIndex} + {count} is beyond the end of this string.
	public getHashCode(startIndex, count)
	{
		startIndex = int(startIndex);
		if startIndex < 0 or startIndex > length:
			throw new ArgumentRangeError("startIndex");
		count = int(startIndex);
		if count < 0:
			throw new ArgumentRangeError("count");
		if startIndex + count > length:
			throw new ArgumentError("startIndex + count is outside the string.");

		if count == this.length:
			return getHashCode();

		return getHashCodeSubstring(startIndex, count);
	}
	private getHashCodeSubstring(startIndex, count)
		__extern("aves_String_getHashCodeSubstring");

	override toString()
	{
		return this;
	}

	/// Summary: Constructs a new String containing the specified Unicode character.
	/// Param codePoint: The Unicode character or code point to convert to a string,
	///           in the range 0 to 1,114,111 (U+10FFFF). (Char, Int, UInt or Real)
	/// Returns: A string of length 1 or 2 that represents the UTF-16 string
	///          with the single code point {codePoint}.
	/// Throws TypeConversionError:
	///          {codePoint} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {codePoint} is less than zero, or greater than 1,114,111 (0x10FFFF).
	/// Remarks: If {codePoint} refers to a surrogate code point, then the resulting
	///          string will contain a single surrogate character with that
	///          code point.
	public static fromCodePoint(codePoint)
		__extern("aves_String_fromCodePoint");

	operator ==(a, b)
		__extern("aves_String_opEquals");
	operator <=>(a, b)
		__extern("aves_String_opCompare");

	iter
	{
		if isEmpty:
			return Iterator.empty;
		return new StringIterator(this);
	}
}

internal class StringIterator is Iterator
{
	public new(this.str);

	private str;
	private i = 0;
	private cur = null;

	override get current => cur;

	override moveNext()
	{
		if i < str.length
		{
			cur = str.getCharacter(i);
			i += cur.length;
			return true;
		}
		return false;
	}
}

/// Summary: Specifies which part of a string is padded (start, end, or both).
public enum StringPad
{
	// Note: These values must be synchronised with those in aves_string.h!

	/// Summary: The start of the string is padded.
	start = 1,
	/// Summary: The end of the string is padded.
	end = 2,
	/// Summary: Both the start and the end are padded, effectively centering
	///          the string within the padding.
	both = 3,
}
