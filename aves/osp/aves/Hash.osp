namespace aves;

/// Summary: This class represents a hash table, which maps keys to values with constant
///          lookup time. A key can be any arbitrary value except null.
/// Remarks: In order to look up keys, a hash table uses an {EqualityComparer} to calculate
///          a hash code for each key, as well as to compare them for equality. The
///          {keyComparer} can be specified when the hash table is created; as such, it is
///          possible to implement custom key comparison logic. The default implementation
///          calls {Object.getHashCode} to hash keys, and uses the `==` operator to compare
///          keys for equality.
///
///          A hash table cannot contain an entry with a null key, irrespective of the
///          {keyComparer}.
///
///          All hash tables are inherently unordered. That is, when enumerating the keys,
///          values or key–value pairs in the hash table, they are not guaranteed to come in
///          any particular order. Adding or removing entries may unpredictably change the
///          iteration order.
///
///          The hash table is one of the fundamental collection types, alongside {List},
///          {Set} and {Array}.
public inheritable Hash is Collection
{
	__init_type("aves_Hash_init");

	/// Summary: Creates a new, empty hash table with the default capacity.
	public new()
	{
		new this(defaultCapacity, null);
	}
	/// Summary: Creates a new, empty hash table with the specified initial capacity.
	/// Param capacity: The initial capacity of the hash table. (Int, UInt or Real)
	/// Throws TypeConversionError:
	///          {capacity} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {capacity} is less than zero, or greater than {maxCapacity}.
	public new(capacity)
	{
		new this(capacity, null);
	}
	/// Summary: Creates a new, empty hash table with the specified initial capacity and key
	///          comparer.
	/// Param capacity: The initial capacity of the hash table. (Int, UInt or Real)
	/// Param keyComparer: An {EqualityComparer} instance that hashes and compares keys for
	///          equality. Null can be passed to use the default key comparer.
	/// Throws TypeConversionError:
	///          {capacity} could not be converted to an Int.
	/// Throws ArgumentError:
	///          {keyComparer} is not null and not an {EqualityComparer}.
	/// Throws ArgumentRangeError:
	///          {capacity} is less than zero, or greater than {maxCapacity}.
	public new(capacity, keyComparer)
	{
		capacity = int(capacity);
		if capacity < 0 or capacity > maxCapacity:
			throw new ArgumentRangeError("capacity");

		if keyComparer is null:
			keyComparer = EqualityComparer.default;
		else if keyComparer is not EqualityComparer:
			throw new ArgumentError("keyComparer must be an instance of aves.EqualityComparer or null.", "keyComparer");

		initialize(capacity, keyComparer);
	}

	/// Summary: Gets the value associated with the specified key.
	/// Param key: The key to look up.
	/// Returns: The value associated with {key}.
	/// Throws ArgumentNullError:
	///          {key} is null.
	/// Throws ArgumentError:
	///          The hash table does not contain an entry with the key {key}.
	public get this[key]
	{
		return getItemInternal(key, getHash(key));
	}
	/// Summary: Sets the value associated with the specified key. If the hash table does not
	///          contain an entry with the specified key, it is added. If there is already an
	///          entry with that key, the previous value is overwritten.
	/// Param key: The key to set the value of.
	/// Throws ArgumentNullError:
	///          {key} is null.
	public set this[key]
	{
		insert(key, getHash(key), value, false);
	}

	/// Summary: Gets the total number of key–value pairs contained in the hash table.
	/// Returns: The total number of key–value pairs in the hash table, as an Int.
	override get length
		__extern("aves_Hash_get_length");

	/// Summary: Gets the capacity of the hash table; that is, the number of entries it can
	///          contain before its internal storage needs to be resized.
	/// Returns: The capacity of the hash table, as an Int.
	public get capacity
		__extern("aves_Hash_get_capacity");

	/// Summary: Gets the {EqualityComparer} that the hash table uses to hash and compare keys.
	/// Returns: The {EqualityComparer} used by the hash table.
	public get keyComparer
		__extern("aves_Hash_get_keyComparer");

	/// Summary: Determines whether the hash table is empty.
	/// Returns: True if {length} is zero; otherwise, false.
	public get isEmpty = length == 0;

	/// Summary: Gets a {Collection} that can be used to iterate over the keys in the hash table.
	/// Returns: A new {Collection} instance that iterates over the keys in the hash
	///          table.
	public get keys = new KeyOrValueCollection(this, true);
	/// Summary: Gets a {Collection} that can be used to iterate over the values in the hash
	///          table.
	/// Returns: A new {Collection} instance that iterates over the values in the hash table.
	public get values = new KeyOrValueCollection(this, false);

	private get version
		__extern("aves_Hash_get_version");
	private get entryCount
		__extern("aves_Hash_get_entryCount");

	private initialize(capacity, keyComparer)
		__extern("aves_Hash_initialize");

	private getItemInternal(key, hash)
		__extern("aves_Hash_getItemInternal");

	private getEntry(index)
		__extern("aves_Hash_getEntry");

	/// Summary: Adds the specified key–value pair to the hash table. If the hash table already
	///          has an entry with the specified key, an error is thrown.
	/// Param key: The key to add.
	/// Param value: The value to associate with the key.
	/// Throws ArgumentNullError:
	///          {key} is null.
	/// Throws DuplicateKeyError:
	///          The hash table already contains an entry with the specified key.
	public add(key, value)
	{
		insert(key, getHash(key), value, true);
	}
	private insert(key, hash, value, add)
		__extern("aves_Hash_insert");

	/// Summary: Determines whether the hash table contains an entry with the specified key.
	/// Param key: The key to look for.
	/// Returns: True if the hash table contains an entirey with the specified key; otherwise,
	///          false.
	/// Throws ArgumentNullError:
	///          {key} is null.
	public containsKey(key)
	{
		return containsKeyInternal(key, getHash(key));
	}
	private containsKeyInternal(key, hash)
		__extern("aves_Hash_containsKeyInternal");

	/// Summary: Determines whether the hash table contains the specified value.
	/// Param value: The value to look for.
	/// Returns: True if the hash table contains the specified value; otherwise, false.
	public containsValue(value)
		__extern("aves_Hash_containsValue");

	/// Summary: Tries to read the specified key from the hash table into the specified variable.
	/// Param key: The key to look up.
	/// Param value: (ref) A variable that receives the value of the key, if the key exists in
	///          the hash table.
	/// Returns: True if the hash table contains the key {key}; otherwise, false. After returning
	///          true, {value} contains the value associated with the key. If the method returns
	///          false, {value} will not have been written to.
	/// Remarks: Calling this method usually performs better than first calling {containsKey} and
	///          then indexing into the hash table.
	///
	///          If the hash table does not contain the specified key, {value} is not modified.
	public tryGet(key, ref value)
	{
		return tryGetInternal(key, getHash(key), ref value);
	}
	private tryGetInternal(key, hash, ref value)
		__extern("aves_Hash_tryGetInternal");

	/// Summary: Removes the entry with the specified key from the hash table.
	/// Param key: The key to remove.
	/// Returns: True if there was an entry with the specified key in the hash table; otherwise,
	///          false.
	/// Throws ArgumentNullError:
	///          {key} is null.
	public remove(key)
	{
		return removeInternal(key, getHash(key));
	}
	private removeInternal(key, hash)
		__extern("aves_Hash_removeInternal");

	/// Summary: Concatenates the specified hash table onto the current hash table.
	/// Param other: The hash table to concatenate onto this hash table. (Hash)
	/// Returns: A new hash table containing the entries of {other} concatenated onto the current
	///          hash table. If the two hash tables have entries with equivalent keys, the value
	///          from {other} will be used. The resulting hash table has the same {keyComparer}
	///          as the current hash table.
	/// Throws ArgumentNullError:
	///          {other} is null.
	/// Throws ArgumentTypeError:
	///          {other} is not a Hash.
	/// Remarks: This method returns a new hash table. It does not modify the original value in
	///          any way.
	public concat(other)
	{
		if other is null:
			throw new ArgumentNullError("other");
		if other is not Hash:
			throw new ArgumentTypeError("other", typeof(Hash));

		return concatInternal(other);
	}
	private concatInternal(other)
		__extern("aves_Hash_concatInternal");

	private pinEntries()
		__extern("aves_Hash_pinEntries");
	private unpinEntries()
		__extern("aves_Hash_unpinEntries");

	/// Summary: Determines whether all the entries in the hash table match the specified
	///          predicate.
	/// Param predicate: An invokable value that accepts two arguments (the key and the value of
	///          a single entry), and returns a truthy value if the entry matches some condition,
	///          and a falsy value otherwise.
	/// Returns: True if {predicate} returns true for all entries in the table, or the hash is
	///          empty. Otherwise, false.
	/// Throws ArgumentNullError:
	///          {predicate} is null.
	/// Remarks: The iteration stops as soon as {predicate} returns false for an entry. This
	///          method is in other words not guaranteed to iterate over the entire hash table.
	///          For that, use {each}.
	///
	///          This method differs from {all} in that it passes two arguments to the predicate
	///          – the key and the value – while {all} passes a single argument containing a
	///          key–value pair in a List.
	public allEntries(predicate)
	{
		if predicate is null:
			throw new ArgumentNullError("predicate");

		var startVersion = version;

		try
		{
			pinEntries();
			for i in [0 to entryCount - 1]
			{
				if startVersion != version:
					throw new InvalidStateError(HashUtils.hashHasChanged);
				var entry = getEntry(i);
				if entry is not null and
					not predicate(entry.key, entry.value):
					return false;
			}
		}
		finally
		{
			unpinEntries();
		}

		return true;
	}

	/// Summary: Determines whether any entry in the hash table matches the specified
	///          predicate.
	/// Param predicate: An invokable value that accepts two arguments (the key and the value of
	///          a single entry), and returns a truthy value if the entry matches some condition,
	///          and a falsy value otherwise.
	/// Returns: True if {predicate} returns true for any entry in the table. Otherwise
	///          (including if the hash is empty), false.
	/// Throws ArgumentNullError:
	///          {predicate} is null.
	/// Remarks: The iteration stops as soon as {predicate} returns true for an entry. This
	///          method is in other words not guaranteed to iterate over the entire hash table.
	///          For that, use {each}.
	///
	///          This method differs from {any} in that it passes two arguments to the predicate
	///          – the key and the value – while {any} passes a single argument containing a
	///          key–value pair in a List.
	public anyEntry(predicate)
	{
		if predicate is null:
			throw new ArgumentNullError("predicate");

		var startVersion = version;

		try
		{
			pinEntries();
			for i in [0 to entryCount - 1]
			{
				if startVersion != version:
					throw new InvalidStateError(HashUtils.hashHasChanged);
				var entry = getEntry(i);
				if entry is not null and
					predicate(entry.key, entry.value):
					return true;
			}
		}
		finally
		{
			unpinEntries();
		}

		return false;
	}

	/// Summary: Calls the specified callback once for each entry in the hash table.
	/// Param func: An invokable value that accepts two arguments (the key and the value of a
	///          single entry), and processes the entry in some way. The return value is
	///          discarded.
	/// Returns: The current hash table.
	/// Throws ArgumentNullError:
	///          {func} is null.
	/// Remarks: This method differs from {each} in that it passes two arguments to {func} – the
	///          key and the value – while {each} passes a single argument containing a key–value
	///          pair in a List.
	public eachEntry(func)
	{
		if func is null:
			throw new ArgumentNullError("func");

		var startVersion = version;

		try
		{
			pinEntries();
			for i in [0 to entryCount - 1]
			{
				if startVersion != version:
					throw new InvalidStateError(HashUtils.hashHasChanged);
				var entry =	getEntry(i);
				if entry is not null:
					func(entry.key, entry.value);
			}
		}
		finally
		{
			unpinEntries();
		}

		return this;
	}

	/// Summary: Returns a new hash table with all the entries from the current hash table that
	///          match the specified predicate.
	/// Param predicate: An invokable value that accepts two arguments (the key and the value of
	///          a single entry), and returns a truthy value if the entry matches some condition,
	///          and a falsy value otherwise.
	/// Returns: A new {Hash} containing all the entries from the current hash that match
	///          {predicate}.
	/// Throws ArgumentNullError:
	///          {predicate} is null.
	/// Remarks: The returned hash table uses the same {keyComparer} as the current hash table.
	///
	///          This method differs from {filter} in that it passes two arguments to the
	///          predicate – the key and the value – while {filter} passes a single argument
	///          containing a key–value pair in a List.
	public filterEntries(predicate)
	{
		if predicate is null:
			throw new ArgumentNullError("predicate");

		var output = new Hash(length, keyComparer);
		var startVersion = version;

		try
		{
			pinEntries();
			for i in [0 to entryCount - 1]
			{
				if startVersion != version:
					throw new InvalidStateError(HashUtils.hashHasChanged);
				var entry = getEntry(i);
				if entry is not null and predicate(entry.key, entry.value):
					output.add(entry.key, entry.value);
			}
		}
		finally
		{
			unpinEntries();
		}

		return output;
	}

	/// Summary: Returns a new hash table based on the current hash table, with keys transformed
	///          according to the specified callback.
	/// Param func: An invokable value that accepts two arguments (the key and the value of a
	///          single entry), and processes the entry in some way. The return value becomes the
	///          new key associated with the value.
	/// Returns: A new hash table based on the current hash table, with keys transformed
	///          according to {func}.
	/// Remarks: The returned hash table uses the same {keyComparer} as the current hash table.
	///
	///          This method differs from {map} in two ways. Firstly, the callback receives two
	///          arguments – the key and the value – while {map} passes a key–value pair in a
	///          list. Secondly, the return type is always {Hash}, whereas {map} returns an
	///          {Iterable}.
	public mapKeys(func)
	{
		var output = new Hash(length, keyComparer);
		var startVersion = version;

		try
		{
			pinEntries();
			for i in [0 to entryCount - 1]
			{
				if startVersion != version:
					throw new InvalidStateError(HashUtils.hashHasChanged);
				var entry = getEntry(i);
				if entry is not null:
					output.add(func(entry.key, entry.value), entry.value);
			}
		}
		finally
		{
			unpinEntries();
		}

		return output;
	}

	/// Summary: Returns a new hash table based on the current hash table, with values
	///          transformed according to the specified callback.
	/// Param func: An invokable value that accepts two arguments (the key and the value of a
	///          single entry), and processes the entry in some way. The return value becomes the
	///          new value associated with the key.
	/// Returns: A new hash table based on the current hash table, with values transformed
	///          according to {func}.
	/// Remarks: The returned hash table uses the same {keyComparer} as the current hash table.
	///
	///          This method differs from {map} in two ways. Firstly, the callback receives two
	///          arguments – the key and the value – while {map} passes a key–value pair in a
	///          List. Secondly, the return type is always {Hash}, whereas {map} returns an
	///          {Iterable}.
	public mapValues(func)
	{
		var output = new Hash(length, keyComparer);
		var startVersion = version;

		try
		{
			pinEntries();
			for i in [0 to entryCount - 1]
			{
				if startVersion != version:
					throw new InvalidStateError(HashUtils.hashHasChanged);
				var entry = getEntry(i);
				if entry is not null:
					output.add(entry.key, func(entry.key, entry.value));
			}
		}
		finally
		{
			unpinEntries();
		}

		return output;
	}

	/// Summary: Returns a new {ReadOnlyIterable} wrapper for the hash table.
	/// Returns: A new {ReadOnlyIterable} that wraps around the current hash table.
	public toReadOnly()
	{
		return new ReadOnlyIterable(this);
	}

	private getHash(key)
	{
		if key is null:
			throw new ArgumentNullError("key");

		var h = keyComparer.getHashCode(key);

		if h is not Int and h is not UInt:
			throw new TypeConversionError("The hash code must be of type Int or UInt.");

		return h;
	}

	overridable override getHashCode()
	{
		return base.getHashCode();
	}

	overridable override toString()
	{
		return "Hash[length = {0}]".format([length]);
	}

	iter
	{
		return new HashIterator(this);
	}

	/// Summary: Gets the maximum number of key–value pairs a hash table can contain.
	/// Returns: The maximum {capacity} of a hash table, as an Int.
	public static get maxCapacity
		__extern("aves_Hash_get_maxCapacity");

	private const defaultCapacity = 0;
}

// This class is a thin wrapper around the native code's HashEntry struct.
// Internally, it contains a pointer to the HashEntry. Marked primitive to
// prevent the GC from trying to reclaim it.
//
// NOTE: Instances of HashEntry MUST NOT leave the code of methods inside
// Hash or HashIterator. Do not return values of this type, as the hash
// itself may be released at any point by the GC, and there is no reference
// back to it. You must also pin the entries array (see HashUtils.pin/unpinEntries)
// for as long as you have a HashEntry, or a GC cycle could make the array
// move and then this pointer would be invalidated.
private class HashEntry __primitive
{
	public get hashCode
		__extern("aves_HashEntry_get_hashCode");
	public get nextIndex
		__extern("aves_HashEntry_get_nextIndex");
	public get key
		__extern("aves_HashEntry_get_key");
	public get value
		__extern("aves_HashEntry_get_value");
}

private class HashIterator is Iterator
{
	public new(this.hash)
	{
		version = HashUtils.getVersion(hash);
	}

	private hash;
	private version;
	private i = -1;
	private cur = null;

	override get current = cur;

	override moveNext()
	{
		if HashUtils.getVersion(hash) != version:
			throw new InvalidStateError(HashUtils.hashHasChanged);

		while i < HashUtils.getEntryCount(hash) - 1
		{
			i += 1;
			try
			{
				HashUtils.pinEntries(hash);
				var entry = HashUtils.getEntry(hash, i);
				if entry is not null
				{
					cur = [entry.key, entry.value];
					return true;
				}
			}
			finally
			{
				HashUtils.unpinEntries(hash);
			}
		}

		return false;
	}
}

private class KeyOrValueCollection is Collection
{
	public new(this.hash, this.useKey);

	private hash;
	private useKey;

	override get length = hash.length;

	iter
	{
		return new KeyOrValueIterator(hash, useKey);
	}
}

private class KeyOrValueIterator is Iterator
{
	public new(this.hash, this.useKey)
	{
		version = HashUtils.getVersion(hash);
	}

	private hash;
	private version;
	private useKey;
	private i = -1;
	private cur = null;

	override get current = cur;

	override moveNext()
	{
		if HashUtils.getVersion(hash) != version:
			throw new InvalidStateError(HashUtils.hashHasChanged);

		while i < HashUtils.getEntryCount(hash) - 1
		{
			i += 1;
			try
			{
				HashUtils.pinEntries(hash);
				var entry = HashUtils.getEntry(hash, i);
				if entry is not null
				{
					cur = useKey ? entry.key : entry.value;
					return true;
				}
			}
			finally
			{
				HashUtils.unpinEntries(hash);
			}
		}

		return false;
	}
}

private static class HashUtils
{
	public const hashHasChanged = "The hash has changed since the iteration started.";

	public static getVersion(hash)
		__extern("aves_Hash_get_version");
	public static getEntryCount(hash)
		__extern("aves_Hash_get_entryCount");
	public static getEntry(hash, index)
		__extern("aves_Hash_getEntry");

	public static pinEntries(hash)
		__extern("aves_Hash_pinEntries");
	public static unpinEntries(hash)
		__extern("aves_Hash_unpinEntries");
}
