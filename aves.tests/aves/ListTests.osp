use namespace aves;
use namespace testing.unit;

namespace aves.tests;

// Tests for the class aves.List

public class ListTests is TestFixture
{
	public new() { new base("aves.List tests"); }

	// indexOf tests

	public test_IndexOf1Found()
	{
		var list = [0, 1, 2, 0, 1, 2];
		var index = list.indexOf(2);
		Assert.areEqual(index, 2);
	}

	public test_IndexOf1NotFound()
	{
		var list = [0, 1, 2, 0, 1, 2];
		var index = list.indexOf(3);
		Assert.isNull(index);
	}

	public test_IndexOf2Found()
	{
		var list = [0, 1, 2, 0, 1, 2];
		var index1 = list.indexOf(1, 0);
		var index2 = list.indexOf(1, 3);
		Assert.areEqual(index1, 1);
		Assert.areEqual(index2, 4);
	}

	public test_IndexOf2NotFound()
	{
		var list = [0, 1, 2, 0, 1, 2];
		var index1 = list.indexOf(3, 0);
		var index2 = list.indexOf(0, 4);
		Assert.isNull(index1);
		Assert.isNull(index2);
	}

	public test_IndexOf2Invalid()
	{
		var list = [0, 1, 2, 0, 1, 2];
		Assert.throws(typeof(ArgumentRangeError), @= list.indexOf(0, 7));
		Assert.throws(typeof(ArgumentRangeError), @= list.indexOf(0, -1));
		Assert.throws(typeof(TypeError), @= list.indexOf(0, "0"));
	}

	public test_IndexOf3Found()
	{
		var list = [0, 1, 2, 0, 1, 2];
		var index1 = list.indexOf(2, 0, 3);
		var index2 = list.indexOf(2, 3, 3);
		Assert.areEqual(index1, 2);
		Assert.areEqual(index2, 5);
	}

	public test_IndexOf3NotFound()
	{
		var list = [0, 1, 2, 0, 1, 2];
		var index = list.indexOf(1, 2, 2);
		Assert.isNull(index);
	}

	public test_IndexOf3Invalid()
	{
		var list = [0, 1, 2, 0, 1, 2];
		Assert.throws(typeof(ArgumentRangeError), @= list.indexOf(0, 7, 0));
		Assert.throws(typeof(ArgumentRangeError), @= list.indexOf(0, -1, 0));
		Assert.throws(typeof(ArgumentRangeError), @= list.indexOf(0, 0, -1));
		Assert.throws(typeof(ArgumentError), @= list.indexOf(0, 6, 1));
		Assert.throws(typeof(TypeError), @= list.indexOf(0, "0", 0));
		Assert.throws(typeof(TypeError), @= list.indexOf(0, 0, "0"));
	}

	// End indexOf tests

	// slice tests

	public test_Slice1Empty()
	{
		var list = [];
		var slice = list.slice(0);
		Assert.collectionsMatch(slice, [], Assert.areEqual);
	}

	public test_Slice1Valid()
	{
		var list = [0, 1, 2, 3, 4];
		var slice = list.slice(2);
		Assert.collectionsMatch(slice, [2, 3, 4], Assert.areEqual);
	}

	public test_Slice1Invalid()
	{
		var list = [0, 1, 2, 3, 4];
		Assert.throws(typeof(ArgumentRangeError), @= list.slice(6));
		Assert.throws(typeof(ArgumentRangeError), @= list.slice(-6));
	}

	public test_Slice2Empty()
	{
		var list = [0, 1, 2, 3, 4];
		var slice = list.slice(1, 0);
		Assert.collectionsMatch(slice, [], Assert.areEqual);
	}

	public test_Slice2Valid()
	{
		var list = [0, 1, 2, 3, 4];
		var slice = list.slice(1, 3);
		Assert.collectionsMatch(slice, [1, 2, 3], Assert.areEqual);
	}

	public test_Slice2Invalid()
	{
		var list = [0, 1, 2, 3, 4];
		Assert.throws(typeof(ArgumentRangeError), @= list.slice(6, 0));
		Assert.throws(typeof(ArgumentRangeError), @= list.slice(0, -1));
		Assert.throws(typeof(ArgumentError), @= list.slice(5, 1));
	}

	// End slice tests

	// sliceTo tests
	// Remember: the endIndex is exclusive!

	public test_SliceToEmpty()
	{
		var list = [0, 1, 2, 3, 4];
		var slice1 = list.sliceTo(0, 0);
		var slice2 = list.sliceTo(5, 5);
		Assert.collectionsMatch(slice1, [], Assert.areEqual);
		Assert.collectionsMatch(slice2, [], Assert.areEqual);
	}

	public test_SliceToEnd()
	{
		var list = [0, 1, 2, 3, 4];
		var slice = list.sliceTo(3, 5);
		Assert.collectionsMatch(slice, [3, 4], Assert.areEqual);
	}

	public test_SliceToValid()
	{
		var list = [0, 1, 2, 3, 4];
		var slice = list.sliceTo(1, 3);
		Assert.collectionsMatch(slice, [1, 2], Assert.areEqual);
	}

	public test_SliceToInvalid()
	{
		var list = [0, 1, 2, 3, 4];
		Assert.throws(typeof(ArgumentRangeError), @= list.sliceTo(5, 0));
		Assert.throws(typeof(ArgumentRangeError), @= list.sliceTo(0, 6));
		Assert.throws(typeof(TypeError), @= list.sliceTo("0", 0));
		Assert.throws(typeof(TypeError), @= list.sliceTo(0, "0"));
	}

	// End sliceTo tests

	// Iterator tests

	public test_IterEmpty()
	{
		var list = [];
		var iterator = list.iter;
		Assert.isFalse(iterator.moveNext());
	}

	public test_Iter1()
	{
		var list = [1];
		var iterator = list.iter;
		Assert.isTrue(iterator.moveNext());
		Assert.areEqual(iterator.current, 1);
		Assert.isFalse(iterator.moveNext());
	}

	public test_Iter2()
	{
		var list = [1, 2];
		var iterator = list.iter;
		Assert.isTrue(iterator.moveNext());
		Assert.areEqual(iterator.current, 1);
		Assert.isTrue(iterator.moveNext());
		Assert.areEqual(iterator.current, 2);
		Assert.isFalse(iterator.moveNext());
	}

	// End iterator tests
}
