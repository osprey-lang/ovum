use aves;
use testing.unit;

namespace aves.tests;

// Tests for the class aves.Hash

public class HashTests is TestFixture
{
	public new() { new base("aves.Hash tests"); }

	// Constructor tests

	public test_Constructor0()
	{
		var h;
		Assert.doesNotThrow(@{ h = new Hash(); });
		Assert.areEqual(h.length, 0);
	}

	public test_Constructor1WithZeroCapacity()
	{
		var h;
		var capacity = 0;
		Assert.doesNotThrow(@{ h = new Hash(capacity); });
		Assert.areEqual(h.length, 0);
		Assert.isGreaterOrEqual(h.capacity, capacity);
	}

	public test_Constructor1WithPositiveCapacity()
	{
		var h;
		var capacity = 42;
		Assert.doesNotThrow(@{ h = new Hash(capacity); });
		Assert.areEqual(h.length, 0);
		Assert.isGreaterOrEqual(h.capacity, capacity);
	}

	public test_Constructor1WithTooMuchCapacity()
	{
		// If Hash.maxCapacity == Int.max, then we can't do anything
		if Hash.maxCapacity == Int.max:
			return;

		var capacity = Hash.maxCapacity + 1;
		Assert.throws(typeof(ArgumentRangeError), @=> new Hash(capacity));
	}

	public test_Constructor1WithInvalidCapacity()
	{
		Assert.throws(typeof(ArgumentRangeError), @=> new Hash(-1));
		Assert.throws(typeof(TypeConversionError), @=> new Hash("123"));
		Assert.throws(typeof(TypeConversionError), @=> new Hash("feather"));
	}

	public test_Constructor2WithZeroCapacity()
	{
		var h;
		var capacity = 0;
		Assert.doesNotThrow(@{ h = new Hash(capacity, EqualityComparer.default); });
		Assert.areEqual(h.length, 0);
		Assert.isGreaterOrEqual(h.capacity, capacity);
		Assert.areSameRef(h.keyComparer, EqualityComparer.default);
	}

	public test_Constructor2WithPositiveCapacity()
	{
		var h;
		var capacity = 42;
		Assert.doesNotThrow(@{ h = new Hash(capacity, EqualityComparer.default); });
		Assert.areEqual(h.length, 0);
		Assert.isGreaterOrEqual(h.capacity, capacity);
		Assert.areSameRef(h.keyComparer, EqualityComparer.default);
	}

	public test_Constructor2WithTooMuchCapacity()
	{
		// If Hash.maxCapacity == Int.max, then we can't do anything
		if Hash.maxCapacity == Int.max:
			return;

		var capacity = Hash.maxCapacity + 1;
		Assert.throws(typeof(ArgumentRangeError), @=> new Hash(capacity, EqualityComparer.default));
	}

	public test_Constructor2WithInvalidCapacity()
	{
		Assert.throws(typeof(ArgumentRangeError), @=> new Hash(-1, EqualityComparer.default));
		Assert.throws(typeof(TypeConversionError), @=> new Hash("123", EqualityComparer.default));
		Assert.throws(typeof(TypeConversionError), @=> new Hash("feather", EqualityComparer.default));
	}

	public test_Constructor2WithNullComparer()
	{
		// When a Hash is constructed with a null keyComparer, it uses
		// the default EqualityComparer.

		var h;
		var capacity = 0;
		Assert.doesNotThrow(@{ h = new Hash(capacity, null); });
		Assert.areSameRef(h.keyComparer, EqualityComparer.default);
	}

	public test_Constructor2WithCustomComparer()
	{
		var h;
		var capacity = 0;
		var comparer = new FailEqualityComparer();

		Assert.doesNotThrow(@{ h = new Hash(capacity, comparer); });
		Assert.areSameRef(h.keyComparer, comparer);
	}

	// Indexer tests

	public test_IndexerSingleAssignmentWithDefaultComparer()
	{
		var h = new Hash(0, EqualityComparer.default);
		var key = new Object();
		var value = new Object();

		h[key] = value;

		Assert.areSameRef(value, h[key]);
	}

	public test_IndexerOverwriteWithDefaultComparer()
	{
		var h = new Hash(0, EqualityComparer.default);
		var key = new Object();
		var value1 = new Object();
		var value2 = new Object();

		h[key] = value1;
		h[key] = value2;

		Assert.areEqual(h.length, 1);
		Assert.areSameRef(value2, h[key]);
	}

	public test_IndexerSingleAssignmentWithCustomComparer()
	{
		var h = new Hash(0, new Mod10Comparer());
		var key = 25;
		var value = new Object();

		h[key] = value;

		Assert.areEqual(h.length, 1);
		Assert.areSameRef(value, h[key]);
	}

	public test_IndexerSingleAssignmentWithEquivalentKeysAndCustomComparer()
	{
		var h = new Hash(0, new Mod10Comparer());
		var writeKey = 5;
		var readKey = 15;
		var value = new Object();

		h[writeKey] = value;

		Assert.areEqual(h.length, 1);
		Assert.areSameRef(value, h[readKey]);
	}

	public test_IndexerOverwriteWithCustomComparer()
	{
		var h = new Hash(0, new Mod10Comparer());
		var key = 25;
		var value1 = new Object();
		var value2 = new Object();

		h[key] = value1;
		h[key] = value2;

		Assert.areEqual(h.length, 1);
		Assert.areSameRef(value2, h[key]);
	}

	public test_IndexerOverwriteWithEquivalentKeysAndCustomComparer()
	{
		var h = new Hash(0, new Mod10Comparer());
		var writeKey1 = 5;
		var writeKey2 = 15;
		var readKey = 25;
		var value1 = new Object();
		var value2 = new Object();

		h[writeKey1] = value1;
		h[writeKey2] = value2;

		Assert.areEqual(h.length, 1);
		Assert.areSameRef(value2, h[readKey]);
		// The original key remains in the hash table, even if its value
		// is overwritten by a different but equivalent key.
		Assert.collectionsMatch(h.keys, [writeKey1], Assert.areEqual);
	}

	// Concat tests

	public test_ConcatWithUniqueKeys()
	{
		var a = new Hash(1);
		var b = new Hash(1);
		a[1] = "one";
		b[2] = "two";

		var result = a.concat(b);

		Assert.areEqual(result.length, 2);
		Assert.areSameRef(result[1], "one");
		Assert.areSameRef(result[2], "two");
	}

	public test_ConcatWithOverlappingKeys()
	{
		var a = new Hash(2);
		var b = new Hash(2);
		a[1] = "one";
		a[2] = "two";
		b[2] = "three";
		b[3] = "four";

		var result = a.concat(b);

		Assert.areEqual(result.length, 3);
		Assert.areEqual(result[1], "one");
		// b[2] overwrites a[2]
		Assert.areEqual(result[2], "three");
		Assert.areEqual(result[3], "four");
	}

	public test_ConcatWithCustomComparer()
	{
		var a = new Hash(1, new Mod10Comparer());
		var b = new Hash(1);
		a[1] = "one";
		b[2] = "two";

		var result = a.concat(b);

		Assert.areEqual(result.length, 2);
		// The resulting hash "inherits" the key comparer of the first hash
		Assert.areSameRef(result.keyComparer, a.keyComparer);
		Assert.areEqual(result[11], "one");
		Assert.areEqual(result[12], "two");
	}

	public test_ConcatWithOverlappingKeysAndCustomComparer()
	{
		var a = new Hash(2, new Mod10Comparer());
		var b = new Hash(2);
		a[3] = "one";
		a[7] = "two";
		b[13] = "three";
		b[27] = "four";

		var result = a.concat(b);

		Assert.areEqual(result.length, 2);
		Assert.areSameRef(result.keyComparer, a.keyComparer);
		// Here, b[13] should overwrite a[3], and b[27] overwrites a[7], because of
		// the custom key comparer.
		Assert.areEqual(result[3], "three");
		Assert.areEqual(result[7], "four");
	}
}
