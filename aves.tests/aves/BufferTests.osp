use namespace aves;
use namespace testing.unit;

namespace aves.tests;

// Tests for the type aves.Buffer

public class BufferTests is TestFixture
{
	public new() { new base("aves.Buffer tests"); }

	public test_ConstructionZeroBytes()
	{
		var size = 0;
		var buffer;
		Assert.doesNotThrow(@{ buffer = new Buffer(size); });
		Assert.areEqual(buffer.size, size);
	}

	public test_ConstructionNonzeroSize()
	{
		var size = 8;
		var buffer;
		Assert.doesNotThrow(@{ buffer = new Buffer(size); });
		Assert.areEqual(buffer.size, size);
	}

	public test_ConstructionNegativeSize()
	{
		// Cannot have a buffer of a negative size
		Assert.throws(typeof(ArgumentRangeError), @= new Buffer(-1));
	}

	// Byte tests

	public test_ReadWriteByte()
	{
		var buffer = new Buffer(1);
		var value = 42;
		buffer.writeByte(0, value);

		Assert.areEqual(buffer.readByte(0), value);
	}

	public test_ReadWriteByteClipped()
	{
		var buffer = new Buffer(2);
		// Value greater than the range of a byte (0 – 255) is clipped;
		// it should not "leak into" subsequent bytes.
		var value = 0xFFFF;
		buffer.writeByte(0, value);

		Assert.areEqual(buffer.readByte(0), 0xFF);
		Assert.areEqual(buffer.readByte(1), 0);
	}

	public test_WriteByteWrongType()
	{
		var buffer = new Buffer(1);
		// Can only write Ints and UInts with writeByte.
		Assert.throws(typeof(TypeError), @= buffer.writeByte(0, 0.0));
	}

	public test_ReadWriteByteOutOfBounds()
	{
		// Cannot read/write outside the buffer
		var buffer = new Buffer(1);
		Assert.throws(typeof(ArgumentRangeError), @= buffer.readByte(1));
		Assert.throws(typeof(ArgumentRangeError), @= buffer.writeByte(1, 0));
	}

	// End byte tests

	// Indexer tests
	// The indexer behaves exactly the same as readByte/writeByte, so the
	// code is mostly copypasted.

	public test_ReadWriteIndexer()
	{
		var buffer = new Buffer(1);
		var value = 42;
		buffer[0] = value;

		Assert.areEqual(buffer[0], value);
	}

	public test_ReadWriteIndexerClipped()
	{
		var buffer = new Buffer(2);
		// Value greater than the range of a byte (0 – 255) is clipped;
		// it should not "leak into" subsequent bytes.
		var value = 0xFFFF;
		buffer[0] = value;

		Assert.areEqual(buffer[0], 0xFF);
		Assert.areEqual(buffer[1], 0);
	}

	public test_WriteIndexerWrongType()
	{
		var buffer = new Buffer(1);
		// Can only write Ints and UInts with writeByte.
		Assert.throws(typeof(TypeError), @{ buffer[0] = 0.0; });
	}

	public test_ReadWriteIndexerOutOfBounds()
	{
		// Cannot read/write outside the buffer
		var buffer = new Buffer(1);
		Assert.throws(typeof(ArgumentRangeError), @= buffer[1]);
		Assert.throws(typeof(ArgumentRangeError), @{ buffer[1] = 0; });
	}

	// End indexer

	// SByte tests

	public test_ReadWriteSbyte()
	{
		var buffer = new Buffer(1);
		// -1 is within the range of a signed byte (-128 – 127), and should
		// be returned as -1, not 255 (0xFF).
		var value = -1;
		buffer.writeSByte(0, value);

		Assert.areEqual(buffer.readSByte(0), value);
	}

	public test_ReadWriteSbyteClipped()
	{
		var buffer = new Buffer(2);
		// Value beyond the range of a signed byte is clipped.
		// Note that the clipping uses the least significant byte
		// verbatim, which means this value should be read as -1,
		// not 127.
		buffer.writeSByte(0, 0xFFFF);

		Assert.areEqual(buffer.readSByte(0), -1);
		Assert.areEqual(buffer.readSByte(1), 0);
	}

	public test_WriteSByteWrongType()
	{
		var buffer = new Buffer(1);
		// Can only write Ints and UInts with writeSByte.
		Assert.throws(typeof(TypeError), @= buffer.writeSByte(0, 0.0));
	}

	public test_ReadWriteSbyteOutOfBounds()
	{
		// Cannot read/write outside the buffer
		var buffer = new Buffer(1);
		Assert.throws(typeof(ArgumentRangeError), @= buffer.readSByte(1));
		Assert.throws(typeof(ArgumentRangeError), @= buffer.writeSByte(1, 0));
	}

	// End sbyte tests

	// Int16 tests

	public test_ReadWriteInt16()
	{
		var buffer = new Buffer(2);
		var value = -0x1234;
		buffer.writeInt16(0, value);

		Assert.areEqual(buffer.readInt16(0), value);
	}

	public test_ReadWriteInt16Clipped()
	{
		var buffer = new Buffer(4);
		// Same logic as with sbyte: value uses two least significant bytes
		// exactly as given, which means this should be read as -1. Also,
		// the value should not "leak into" neighbouring bytes.
		var value = 0xFFFFFFFF;
		buffer.writeInt16(0, value);

		Assert.areEqual(buffer.readInt16(0), -1);
		Assert.areEqual(buffer.readInt16(1), 0);
	}

	public test_WriteInt16WrongType()
	{
		var buffer = new Buffer(2);
		// Can only write Ints and UInts with writeInt16.
		Assert.throws(typeof(TypeError), @= buffer.writeInt16(0, 0.0));
	}

	public test_ReadWriteInt16OutOfBounds()
	{
		// Cannot read/write outside the buffer
		var buffer = new Buffer(2);
		Assert.throws(typeof(ArgumentRangeError), @= buffer.readInt16(1));
		Assert.throws(typeof(ArgumentRangeError), @= buffer.writeInt16(1, 0));
	}

	// End int16 tests

	// UInt16 tests

	public test_ReadWriteUInt16()
	{
		var buffer = new Buffer(2);
		var value = 0x1234;
		buffer.writeUInt16(0, value);

		Assert.areEqual(buffer.readUInt16(0), value);
	}

	public test_ReadWriteUInt16Clipped()
	{
		var buffer = new Buffer(4);
		// Value should not "leak into" neighbouring bytes
		var value = 0xFFFFFFFF;
		buffer.writeUInt16(0, value);

		Assert.areEqual(buffer.readUInt16(0), 0xFFFF);
		Assert.areEqual(buffer.readUInt16(1), 0);
	}

	public test_WriteUInt16WrongType()
	{
		var buffer = new Buffer(2);
		// Can only write Ints and UInts with writeUInt16.
		Assert.throws(typeof(TypeError), @= buffer.writeUInt16(0, 0.0));
	}

	public test_ReadWriteUInt16OutOfBounds()
	{
		// Cannot read/write outside the buffer
		var buffer = new Buffer(2);
		Assert.throws(typeof(ArgumentRangeError), @= buffer.readUInt16(1));
		Assert.throws(typeof(ArgumentRangeError), @= buffer.writeUInt16(1, 0));
	}

	// End uint16 tests

	// Int32 tests

	public test_ReadWriteInt32()
	{
		var buffer = new Buffer(4);
		var value = -0x12345678;
		buffer.writeInt32(0, value);

		Assert.areEqual(buffer.readInt32(0), value);
	}

	public test_ReadWriteInt32Clipped()
	{
		var buffer = new Buffer(8);
		// Same logic as with sbyte: value uses four least significant bytes
		// exactly as given, which means this should be read as -1. Also,
		// the value should not "leak into" neighbouring bytes.
		var value = 0x7FFFFFFFFFFFFFFF;
		buffer.writeInt32(0, value);

		Assert.areEqual(buffer.readInt32(0), -1);
		Assert.areEqual(buffer.readInt32(1), 0);
	}

	public test_WriteInt32WrongType()
	{
		var buffer = new Buffer(4);
		// Can only write Ints and UInts with writeInt32.
		Assert.throws(typeof(TypeError), @= buffer.writeInt32(0, 0.0));
	}

	public test_ReadWriteInt32OutOfBounds()
	{
		// Cannot read/write outside the buffer
		var buffer = new Buffer(4);
		Assert.throws(typeof(ArgumentRangeError), @= buffer.readInt32(1));
		Assert.throws(typeof(ArgumentRangeError), @= buffer.writeInt32(1, 0));
	}

	// End int32 tests

	// UInt32 tests

	public test_ReadWriteUInt32()
	{
		var buffer = new Buffer(4);
		var value = 0x12345678;
		buffer.writeUInt32(0, value);

		Assert.areEqual(buffer.readUInt32(0), value);
	}

	public test_ReadWriteUInt32Clipped()
	{
		var buffer = new Buffer(8);
		// Value should not "leak into" neighbouring bytes
		var value = 0xFFFFFFFFFFFFFFFFu;
		buffer.writeUInt32(0, value);

		Assert.areEqual(buffer.readUInt32(0), 0xFFFFFFFF);
		Assert.areEqual(buffer.readUInt32(1), 0);
	}

	public test_WriteUInt32WrongType()
	{
		var buffer = new Buffer(4);
		// Can only write Ints and UInts with writeUInt32.
		Assert.throws(typeof(TypeError), @= buffer.writeUInt32(0, 0.0));
	}

	public test_ReadWriteUInt32OutOfBounds()
	{
		// Cannot read/write outside the buffer
		var buffer = new Buffer(4);
		Assert.throws(typeof(ArgumentRangeError), @= buffer.readUInt32(1));
		Assert.throws(typeof(ArgumentRangeError), @= buffer.writeUInt32(1, 0));
	}

	// End uint32 tests

	// Int64 tests
	// Note: No clipping tests here, because aves.Int is only 64 bits.

	public test_ReadWriteInt64()
	{
		var buffer = new Buffer(8);
		var value = -0x123456789ABCDEF0;
		buffer.writeInt64(0, value);

		Assert.areEqual(buffer.readInt64(0), value);
	}

	public test_ReadWriteInt64OutOfBounds()
	{
		// Cannot read/write outside the buffer
		var buffer = new Buffer(8);
		Assert.throws(typeof(ArgumentRangeError), @= buffer.readInt64(1));
		Assert.throws(typeof(ArgumentRangeError), @= buffer.writeInt64(1, 0));
	}

	public test_WriteInt64WrongType()
	{
		var buffer = new Buffer(8);
		// Can only write Ints and UInts with writeInt64.
		Assert.throws(typeof(TypeError), @= buffer.writeInt64(0, 0.0));
	}

	// End int64 tests

	// UInt64 tests
	// Note: Also no clipping tests here, for the same reason.

	public test_ReadWriteUInt64()
	{
		var buffer = new Buffer(8);
		var value = 0x123456789ABCDEF0;
		buffer.writeUInt64(0, value);

		Assert.areEqual(buffer.readUInt64(0), value);
	}

	public test_ReadWriteUInt64OutOfBounds()
	{
		// Cannot read/write outside the buffer
		var buffer = new Buffer(8);
		Assert.throws(typeof(ArgumentRangeError), @= buffer.readUInt64(1));
		Assert.throws(typeof(ArgumentRangeError), @= buffer.writeUInt64(1, 0));
	}

	public test_WriteUInt64WrongType()
	{
		var buffer = new Buffer(8);
		// Can only write Ints and UInts with writeUInt64.
		Assert.throws(typeof(TypeError), @= buffer.writeUInt64(0, 0.0));
	}

	// End uint64 tests

	// Float32 tests

	public test_ReadWriteFloat32()
	{
		var buffer = new Buffer(4);
		// 1.0 can round-trip to float32 just fine
		var value = 1.0;
		buffer.writeFloat32(0, value);

		Assert.areEqual(buffer.readFloat32(0), value);
	}

	public test_ReadWriteFloat32_NaN()
	{
		var buffer = new Buffer(4);
		var value = Real.NaN;
		buffer.writeFloat32(0, value);

		// Note: in Osprey, Real's operator == returns true if
		// both operands are NaN. Hence, it's safe to compare
		// the value using areEqual.
		Assert.areEqual(buffer.readFloat32(0), value);
	}

	public test_ReadWriteFloat32_Infinities()
	{
		var buffer = new Buffer(8);
		var value1 = Real.inf;
		var value2 = -Real.inf;
		buffer.writeFloat32(0, value1);
		buffer.writeFloat32(1, value2);

		Assert.areEqual(buffer.readFloat32(0), value1);
		Assert.areEqual(buffer.readFloat32(1), value2);
	}

	public test_ReadWriteFloat32OutOfBounds()
	{
		// Cannot read/write outside the buffer
		var buffer = new Buffer(4);
		Assert.throws(typeof(ArgumentRangeError), @= buffer.readFloat32(1));
		Assert.throws(typeof(ArgumentRangeError), @= buffer.writeFloat32(1, 0.0));
	}

	public test_WriteFloat32WrongType()
	{
		var buffer = new Buffer(4);
		// Can only write Reals with writeFloat32
		Assert.throws(typeof(TypeError), @= buffer.writeFloat32(0, 0));
	}

	// End float32 tests

	// Float64 tests

	public test_ReadWriteFloat64()
	{
		var buffer = new Buffer(8);
		var value = 1.0;
		buffer.writeFloat64(0, value);

		Assert.areEqual(buffer.readFloat64(0), value);
	}

	public test_ReadWriteFloat64_NaN()
	{
		var buffer = new Buffer(8);
		var value = Real.NaN;
		buffer.writeFloat64(0, value);

		// Note: in Osprey, Real's operator == returns true if
		// both operands are NaN. Hence, it's safe to compare
		// the value using areEqual.
		Assert.areEqual(buffer.readFloat64(0), value);
	}

	public test_ReadWriteFloat64_Infinities()
	{
		var buffer = new Buffer(16);
		var value1 = Real.inf;
		var value2 = -Real.inf;
		buffer.writeFloat64(0, value1);
		buffer.writeFloat64(1, value2);

		Assert.areEqual(buffer.readFloat64(0), value1);
		Assert.areEqual(buffer.readFloat64(1), value2);
	}

	public test_ReadWriteFloat64OutOfBounds()
	{
		// Cannot read/write outside the buffer
		var buffer = new Buffer(8);
		Assert.throws(typeof(ArgumentRangeError), @= buffer.readFloat64(1));
		Assert.throws(typeof(ArgumentRangeError), @= buffer.writeFloat64(1, 0.0));
	}

	public test_WriteFloat64WrongType()
	{
		var buffer = new Buffer(8);
		// Can only write Reals with writeFloat64
		Assert.throws(typeof(TypeError), @= buffer.writeFloat64(0, 0));
	}

	// End float64 tests
}