use aves;
use testing.unit;

namespace aves.tests;

// Tests for the class aves.Stack

public class StackTests is TestFixture
{
	public new() { new base("aves.Stack tests"); }

	// Constructor tests

	public test_Constructor0()
	{
		var stack;
		Assert.doesNotThrow(@{ stack = new Stack(); });
		Assert.areEqual(stack.length, 0);
	}

	public test_Constructor1WithZeroCapacity()
	{
		var stack;
		Assert.doesNotThrow(@{ stack = new Stack(0); });
		Assert.areEqual(stack.length, 0);
		Assert.areEqual(stack.capacity, 0);
	}

	public test_Constructor1WithPositiveCapacity()
	{
		var stack;
		var capacity = 5;
		Assert.doesNotThrow(@{ stack = new Stack(capacity); });
		Assert.areEqual(stack.length, 0);
		Assert.areEqual(stack.capacity, capacity);
	}

	public test_Constructor1WithInvalidCapacity()
	{
		Assert.throws(typeof(ArgumentRangeError), @= new Stack(-1));
		Assert.throws(typeof(TypeConversionError), @= new Stack("123"));
		Assert.throws(typeof(TypeConversionError), @= new Stack("chirp"));
	}

	// End constructor tests

	// Manipulation tests

	public test_Push()
	{
		var stack = new Stack(4);
		stack.push(1);
		stack.push(2);
		stack.push(3);
		Assert.areEqual(stack.length, 3);
	}

	public test_PushPop()
	{
		var stack = new Stack(4);
		stack.push(1);
		stack.push(2);
		stack.push(3);

		Assert.areEqual(stack.length, 3);

		Assert.areEqual(stack.pop(), 3);
		Assert.areEqual(stack.pop(), 2);
		stack.push(4);
		stack.push(5);

		Assert.areEqual(stack.length, 3);
		Assert.areEqual(stack.pop(), 5);
		Assert.areEqual(stack.pop(), 4);

		Assert.areEqual(stack.pop(), 1);

		Assert.areEqual(stack.length, 0);
	}

	public test_PushPopResize()
	{
		var stack = new Stack(2);
		Assert.areEqual(stack.capacity, 2);

		stack.push(1);
		stack.push(2);
		stack.push(3);
		stack.push(4);

		Assert.areEqual(stack.length, 4);
		Assert.isGreater(stack.capacity, 2);

		Assert.areEqual(stack.pop(), 4);
		Assert.areEqual(stack.pop(), 3);
		Assert.areEqual(stack.pop(), 2);
		Assert.areEqual(stack.pop(), 1);
		Assert.areEqual(stack.length, 0);
	}

	public test_PopEmpty()
	{
		var stack = new Stack();
		Assert.throws(typeof(InvalidStateError), @= stack.pop());
	}

	// End manipulation tests

	// Iterator tests

	public test_IterEmpty()
	{
		var stack = new Stack();
		var iterator = stack.iter;
		Assert.isFalse(iterator.moveNext());
	}

	public test_Iter1()
	{
		var stack = new Stack();
		stack.push(1);
		var iterator = stack.iter;
		Assert.isTrue(iterator.moveNext());
		Assert.areEqual(iterator.current, 1);
		Assert.isFalse(iterator.moveNext());
	}

	public test_Iter2()
	{
		var stack = new Stack();
		stack.push(1);
		stack.push(2);
		var iterator = stack.iter;
		Assert.isTrue(iterator.moveNext());
		Assert.areEqual(iterator.current, 2);
		Assert.isTrue(iterator.moveNext());
		Assert.areEqual(iterator.current, 1);
		Assert.isFalse(iterator.moveNext());
	}

	// End iterator tests
}
