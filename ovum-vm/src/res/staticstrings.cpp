#include "staticstrings.h"
#include <new>

/*********************************************************/
/*                                                       */
/*                 DO NOT EDIT THIS FILE                 */
/*              THIS FILE IS AUTO-GENERATED              */
/*                                                       */
/*  To change this file, edit staticstrings.json and/or  */
/*  staticstrigs.template.cpp, and run staticstrings.py  */
/*                                                       */
/*********************************************************/

namespace ovum
{

const StaticStringData staticStringData = {
	{ 0, 0, StringFlags::STATIC, 0 },
	{ 5, 0, StringFlags::STATIC, 46,99,97,108,108,0 },
	{ 5, 0, StringFlags::STATIC, 46,105,110,105,116,0 },
	{ 5, 0, StringFlags::STATIC, 46,105,116,101,109,0 },
	{ 5, 0, StringFlags::STATIC, 46,105,116,101,114,0 },
	{ 7, 0, StringFlags::STATIC, 109,101,115,115,97,103,101,0 },
	{ 4, 0, StringFlags::STATIC, 46,110,101,119,0 },
	{ 8, 0, StringFlags::STATIC, 116,111,83,116,114,105,110,103,0 },
	{ 12, 0, StringFlags::STATIC, 97,118,101,115,46,66,111,111,108,101,97,110,0 },
	{ 22, 0, StringFlags::STATIC, 97,118,101,115,46,68,105,118,105,100,101,66,121,90,101,114,111,69,114,114,111,114,0 },
	{ 9, 0, StringFlags::STATIC, 97,118,101,115,46,69,110,117,109,0 },
	{ 10, 0, StringFlags::STATIC, 97,118,101,115,46,69,114,114,111,114,0 },
	{ 9, 0, StringFlags::STATIC, 97,118,101,115,46,72,97,115,104,0 },
	{ 8, 0, StringFlags::STATIC, 97,118,101,115,46,73,110,116,0 },
	{ 13, 0, StringFlags::STATIC, 97,118,101,115,46,73,116,101,114,97,116,111,114,0 },
	{ 9, 0, StringFlags::STATIC, 97,118,101,115,46,76,105,115,116,0 },
	{ 24, 0, StringFlags::STATIC, 97,118,101,115,46,77,101,109,98,101,114,78,111,116,70,111,117,110,100,69,114,114,111,114,0 },
	{ 16, 0, StringFlags::STATIC, 97,118,101,115,46,77,101,109,111,114,121,69,114,114,111,114,0 },
	{ 11, 0, StringFlags::STATIC, 97,118,101,115,46,77,101,116,104,111,100,0 },
	{ 20, 0, StringFlags::STATIC, 97,118,101,115,46,78,111,79,118,101,114,108,111,97,100,69,114,114,111,114,0 },
	{ 23, 0, StringFlags::STATIC, 97,118,101,115,46,78,117,108,108,82,101,102,101,114,101,110,99,101,69,114,114,111,114,0 },
	{ 11, 0, StringFlags::STATIC, 97,118,101,115,46,79,98,106,101,99,116,0 },
	{ 18, 0, StringFlags::STATIC, 97,118,101,115,46,79,118,101,114,102,108,111,119,69,114,114,111,114,0 },
	{ 9, 0, StringFlags::STATIC, 97,118,101,115,46,82,101,97,108,0 },
	{ 11, 0, StringFlags::STATIC, 97,118,101,115,46,83,116,114,105,110,103,0 },
	{ 14, 0, StringFlags::STATIC, 97,118,101,115,46,84,121,112,101,69,114,114,111,114,0 },
	{ 9, 0, StringFlags::STATIC, 97,118,101,115,46,85,73,110,116,0 },
	{ 20, 0, StringFlags::STATIC, 97,118,101,115,46,114,101,102,108,101,99,116,105,111,110,46,84,121,112,101,0 },
	{ 1, 0, StringFlags::STATIC, 43,0 },
	{ 1, 0, StringFlags::STATIC, 45,0 },
	{ 1, 0, StringFlags::STATIC, 124,0 },
	{ 1, 0, StringFlags::STATIC, 94,0 },
	{ 1, 0, StringFlags::STATIC, 42,0 },
	{ 1, 0, StringFlags::STATIC, 47,0 },
	{ 1, 0, StringFlags::STATIC, 37,0 },
	{ 1, 0, StringFlags::STATIC, 38,0 },
	{ 2, 0, StringFlags::STATIC, 42,42,0 },
	{ 2, 0, StringFlags::STATIC, 60,60,0 },
	{ 2, 0, StringFlags::STATIC, 62,62,0 },
	{ 1, 0, StringFlags::STATIC, 35,0 },
	{ 1, 0, StringFlags::STATIC, 36,0 },
	{ 1, 0, StringFlags::STATIC, 43,0 },
	{ 1, 0, StringFlags::STATIC, 45,0 },
	{ 1, 0, StringFlags::STATIC, 126,0 },
	{ 2, 0, StringFlags::STATIC, 61,61,0 },
	{ 3, 0, StringFlags::STATIC, 60,61,62,0 },
	{ 50, 0, StringFlags::STATIC, 67,97,110,110,111,116,32,97,99,99,101,115,115,32,97,32,115,116,97,116,105,99,32,109,101,109,98,101,114,32,116,104,114,111,117,103,104,32,97,110,32,105,110,115,116,97,110,99,101,46,0 },
	{ 26, 0, StringFlags::STATIC, 67,97,110,110,111,116,32,97,115,115,105,103,110,32,116,111,32,97,32,109,101,116,104,111,100,46,0 },
	{ 33, 0, StringFlags::STATIC, 67,97,110,110,111,116,32,103,101,116,32,97,32,119,114,105,116,101,45,111,110,108,121,32,112,114,111,112,101,114,116,121,46,0 },
	{ 38, 0, StringFlags::STATIC, 67,97,110,110,111,116,32,97,115,115,105,103,110,32,116,111,32,97,32,114,101,97,100,45,111,110,108,121,32,112,114,111,112,101,114,116,121,46,0 },
	{ 43, 0, StringFlags::STATIC, 84,104,101,32,99,111,109,112,97,114,105,115,111,110,32,111,112,101,114,97,116,111,114,32,109,117,115,116,32,114,101,116,117,114,110,32,97,110,32,73,110,116,46,0 },
	{ 93, 0, StringFlags::STATIC, 79,110,101,32,111,114,32,109,111,114,101,32,97,114,103,117,109,101,110,116,115,32,104,97,115,32,116,104,101,32,119,114,111,110,103,32,114,101,102,101,114,101,110,99,101,110,101,115,115,32,40,115,104,111,117,108,100,32,98,101,32,97,32,114,101,102,32,98,117,116,32,105,115,110,39,116,44,32,111,114,32,118,105,99,101,32,118,101,114,115,97,41,46,0 },
	{ 71, 0, StringFlags::STATIC, 84,104,101,32,116,121,112,101,32,100,111,101,115,32,110,111,116,32,99,111,110,116,97,105,110,32,97,110,32,105,110,100,101,120,101,114,44,32,111,114,32,116,104,101,32,105,110,100,101,120,101,114,32,105,115,32,110,111,116,32,97,99,99,101,115,115,105,98,108,101,46,0 },
	{ 36, 0, StringFlags::STATIC, 84,104,101,32,115,112,101,99,105,102,105,101,100,32,109,101,109,98,101,114,32,105,115,32,110,111,116,32,97,32,102,105,101,108,100,46,0 },
	{ 30, 0, StringFlags::STATIC, 84,104,101,32,109,101,109,98,101,114,32,99,111,117,108,100,32,110,111,116,32,98,101,32,102,111,117,110,100,46,0 },
	{ 28, 0, StringFlags::STATIC, 84,104,101,32,109,101,109,98,101,114,32,105,115,32,110,111,116,32,105,110,118,111,107,97,98,108,101,46,0 },
	{ 42, 0, StringFlags::STATIC, 84,104,101,32,111,98,106,101,99,116,32,105,115,32,116,111,111,32,108,97,114,103,101,32,116,111,32,98,101,32,99,111,110,115,116,114,117,99,116,101,100,46,0 },
	{ 43, 0, StringFlags::STATIC, 84,104,101,32,118,97,108,117,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,97,110,32,73,110,116,46,0 },
	{ 43, 0, StringFlags::STATIC, 84,104,101,32,118,97,108,117,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,97,32,82,101,97,108,46,0 },
	{ 50, 0, StringFlags::STATIC, 84,104,101,32,114,101,116,117,114,110,32,118,97,108,117,101,32,111,102,32,39,116,111,83,116,114,105,110,103,40,41,39,32,109,117,115,116,32,98,101,32,97,32,115,116,114,105,110,103,46,0 },
	{ 43, 0, StringFlags::STATIC, 84,104,101,32,118,97,108,117,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,97,32,85,73,110,116,46,0 },
	{ 28, 0, StringFlags::STATIC, 84,104,101,32,118,97,108,117,101,32,105,115,32,110,111,116,32,99,111,109,112,97,114,97,98,108,101,46,0 },
	{ 27, 0, StringFlags::STATIC, 84,104,101,32,118,97,108,117,101,32,105,115,32,110,111,116,32,105,110,118,111,107,97,98,108,101,46,0 },
	{ 71, 0, StringFlags::STATIC, 84,104,101,32,97,114,103,117,109,101,110,116,115,32,108,105,115,116,32,105,110,32,97,32,102,117,110,99,116,105,111,110,32,97,112,112,108,105,99,97,116,105,111,110,32,109,117,115,116,32,98,101,32,111,102,32,116,121,112,101,32,97,118,101,115,46,76,105,115,116,46,0 },
};

int StaticStrings::Create(StaticStrings *&result)
{
	StaticStrings *output = new(std::nothrow) StaticStrings();
	if (output == nullptr)
		return OVUM_ERROR_NO_MEMORY;

	// StaticStringData has no default constructor, because LitString
	// has const members, so we can't use 'new' here. Since we're going
	// to copy all the string data from a static instance anyway, it's
	// probably fine to use malloc/free for this member.
	output->data = reinterpret_cast<StaticStringData*>(malloc(sizeof(StaticStringData)));
	if (output->data == nullptr)
	{
		delete output;
		return OVUM_ERROR_NO_MEMORY;
	}
	output->InitData();
	output->InitStrings();

	result = output;
	RETURN_SUCCESS;
}

StaticStrings::StaticStrings() :
	data(nullptr)
{ }

StaticStrings::~StaticStrings()
{
	free(data);
}

void StaticStrings::InitData()
{
	memcpy(this->data, &ovum::staticStringData, sizeof(StaticStringData));
}

void StaticStrings::InitStrings()
{
	StaticStringData *data = this->data;
	this->empty = reinterpret_cast<String*>(&data->empty);
	this->members.call_ = reinterpret_cast<String*>(&data->members_call_);
	this->members.init_ = reinterpret_cast<String*>(&data->members_init_);
	this->members.item_ = reinterpret_cast<String*>(&data->members_item_);
	this->members.iter_ = reinterpret_cast<String*>(&data->members_iter_);
	this->members.message = reinterpret_cast<String*>(&data->members_message);
	this->members.new_ = reinterpret_cast<String*>(&data->members_new_);
	this->members.toString = reinterpret_cast<String*>(&data->members_toString);
	this->types.aves.Boolean = reinterpret_cast<String*>(&data->types_aves_Boolean);
	this->types.aves.DivideByZeroError = reinterpret_cast<String*>(&data->types_aves_DivideByZeroError);
	this->types.aves.Enum = reinterpret_cast<String*>(&data->types_aves_Enum);
	this->types.aves.Error = reinterpret_cast<String*>(&data->types_aves_Error);
	this->types.aves.Hash = reinterpret_cast<String*>(&data->types_aves_Hash);
	this->types.aves.Int = reinterpret_cast<String*>(&data->types_aves_Int);
	this->types.aves.Iterator = reinterpret_cast<String*>(&data->types_aves_Iterator);
	this->types.aves.List = reinterpret_cast<String*>(&data->types_aves_List);
	this->types.aves.MemberNotFoundError = reinterpret_cast<String*>(&data->types_aves_MemberNotFoundError);
	this->types.aves.MemoryError = reinterpret_cast<String*>(&data->types_aves_MemoryError);
	this->types.aves.Method = reinterpret_cast<String*>(&data->types_aves_Method);
	this->types.aves.NoOverloadError = reinterpret_cast<String*>(&data->types_aves_NoOverloadError);
	this->types.aves.NullReferenceError = reinterpret_cast<String*>(&data->types_aves_NullReferenceError);
	this->types.aves.Object = reinterpret_cast<String*>(&data->types_aves_Object);
	this->types.aves.OverflowError = reinterpret_cast<String*>(&data->types_aves_OverflowError);
	this->types.aves.Real = reinterpret_cast<String*>(&data->types_aves_Real);
	this->types.aves.String = reinterpret_cast<String*>(&data->types_aves_String);
	this->types.aves.TypeError = reinterpret_cast<String*>(&data->types_aves_TypeError);
	this->types.aves.UInt = reinterpret_cast<String*>(&data->types_aves_UInt);
	this->types.aves.reflection.Type = reinterpret_cast<String*>(&data->types_aves_reflection_Type);
	this->operators.add = reinterpret_cast<String*>(&data->operators_add);
	this->operators.subtract = reinterpret_cast<String*>(&data->operators_subtract);
	this->operators.or = reinterpret_cast<String*>(&data->operators_or);
	this->operators.xor = reinterpret_cast<String*>(&data->operators_xor);
	this->operators.multiply = reinterpret_cast<String*>(&data->operators_multiply);
	this->operators.divide = reinterpret_cast<String*>(&data->operators_divide);
	this->operators.modulo = reinterpret_cast<String*>(&data->operators_modulo);
	this->operators.and = reinterpret_cast<String*>(&data->operators_and);
	this->operators.power = reinterpret_cast<String*>(&data->operators_power);
	this->operators.shiftLeft = reinterpret_cast<String*>(&data->operators_shiftLeft);
	this->operators.shiftRight = reinterpret_cast<String*>(&data->operators_shiftRight);
	this->operators.hash = reinterpret_cast<String*>(&data->operators_hash);
	this->operators.dollar = reinterpret_cast<String*>(&data->operators_dollar);
	this->operators.plus = reinterpret_cast<String*>(&data->operators_plus);
	this->operators.negate = reinterpret_cast<String*>(&data->operators_negate);
	this->operators.not = reinterpret_cast<String*>(&data->operators_not);
	this->operators.equal = reinterpret_cast<String*>(&data->operators_equal);
	this->operators.compare = reinterpret_cast<String*>(&data->operators_compare);
	this->error.CannotAccessStaticMemberThroughInstance = reinterpret_cast<String*>(&data->error_CannotAccessStaticMemberThroughInstance);
	this->error.CannotAssignToMethod = reinterpret_cast<String*>(&data->error_CannotAssignToMethod);
	this->error.CannotGetWriteOnlyProperty = reinterpret_cast<String*>(&data->error_CannotGetWriteOnlyProperty);
	this->error.CannotSetReadOnlyProperty = reinterpret_cast<String*>(&data->error_CannotSetReadOnlyProperty);
	this->error.CompareOperatorWrongReturnType = reinterpret_cast<String*>(&data->error_CompareOperatorWrongReturnType);
	this->error.IncorrectRefness = reinterpret_cast<String*>(&data->error_IncorrectRefness);
	this->error.IndexerNotFound = reinterpret_cast<String*>(&data->error_IndexerNotFound);
	this->error.MemberIsNotAField = reinterpret_cast<String*>(&data->error_MemberIsNotAField);
	this->error.MemberNotFound = reinterpret_cast<String*>(&data->error_MemberNotFound);
	this->error.MemberNotInvokable = reinterpret_cast<String*>(&data->error_MemberNotInvokable);
	this->error.ObjectTooLarge = reinterpret_cast<String*>(&data->error_ObjectTooLarge);
	this->error.ToIntFailed = reinterpret_cast<String*>(&data->error_ToIntFailed);
	this->error.ToRealFailed = reinterpret_cast<String*>(&data->error_ToRealFailed);
	this->error.ToStringWrongReturnType = reinterpret_cast<String*>(&data->error_ToStringWrongReturnType);
	this->error.ToUIntFailed = reinterpret_cast<String*>(&data->error_ToUIntFailed);
	this->error.ValueNotComparable = reinterpret_cast<String*>(&data->error_ValueNotComparable);
	this->error.ValueNotInvokable = reinterpret_cast<String*>(&data->error_ValueNotInvokable);
	this->error.WrongApplyArgumentsType = reinterpret_cast<String*>(&data->error_WrongApplyArgumentsType);
}

} // namespace ovum
